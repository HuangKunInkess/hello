import fs from 'fs';
import path from 'path';
import _decompress from 'decompress';
import { delSync, mkdirAsync } from './fs';

export const decompress = _decompress;

export const unzip = (
    zipFile: string,
    dest: string
): Promise<
    {
        data: Buffer
        mode: Number
        mtime: String
        path: String
        type: String
    }[]
> => decompress(zipFile, dest);

/**
 * 解压流（使用临时 zip 包）
 * @param source 可读流
 * @param dest 解压目标文件夹
 * @param name 可选的临时 zip 包名
 */
export const unzipStream = async (
    source: NodeJS.ReadableStream,
    dest: string,
    name = 'gape3il5rk8.zip'
) => {
    // 确保文件夹存在
    await mkdirAsync(dest);

    // 使用一个临时文件下载 zip 包
    const zipPath = path.join(dest, `${name}.zip`);
    const zip = fs.createWriteStream(zipPath);

    source.pipe(zip);

    return new Promise<void>((resolve, reject) => {
        zip.on('error', reject);

        zip.on('close', () => {
            unzip(zipPath, dest)
                .then(() => {
                    delSync([zipPath]);
                    resolve();
                })
                .catch((e) => {
                    delSync([zipPath]);
                    reject(e);
                });
        });
    });
};
