interface Options {
    exit?: number
    original?: Error | undefined
    code?: string | number
    requestId?: string
    action?: string
    source?: string
}

export class CloudBaseError extends Error {
    readonly exit: number
    readonly message: string
    readonly name = 'CloudBaseError'
    // record original error object
    readonly original: Error | undefined
    readonly code: string | number
    readonly requestId: string
    readonly action: string
    readonly options: Options
    // record error source, use for
    readonly source: string

    constructor(message: string, options: Options = {}) {
        super();
        const { code = '', action = '', original = null, requestId = '', source } = options;
        this.options = options;
        this.message = this.getFormatMessage(message);
        this.original = original;
        this.code = code;
        this.requestId = requestId;
        this.action = action;
        this.source = source;
    }

    getFormatMessage(message: string) {
        const { code = '', action = '', original = null, requestId = '' } = this.options;
        const msg = [];
        if (action) {
            msg.push(`[${action}]`);
        }

        if (requestId) {
            msg.push(`RequestId: ${requestId}`);
        }

        if (code) {
            msg.push(`Error Code: ${code}`);
        }

        if (message) {
            msg.push(message);
        }

        return msg.join('ï¼Œ');
    }
}
