class Entry {
    // eslint-disable-next-line
    constructor(
        public key: string | number,
        public value: any,
        public now: number,
        public maxAge: number
    ) {}

    // 当前 entry 是否过期
    isExpired() {
        const now = Date.now();
        return this.now + this.maxAge <= now;
    }
}

export interface ICacheOptions {
    // 设置 nil 为 true，当缓存不存在时或过期时，
    // 返回 Cache.NIL Symbol 值，否则返回 null
    nil: boolean
}

/**
 * 缓存模块
 * 1. 内存缓存
 * 2. TODO: 本地缓存
 */
export class Cache {
    // 标志缓存不存在或过期
    static NIL = Symbol('NIL')

    // use map to cache
    private store = new Map()

    private nil = false

    constructor(nil?: boolean) {
        this.nil = nil;
    }

    /**
     * 设置缓存
     * @param key 缓存 key
     * @param value 缓存值
     * @param maxAge 缓存保持时间，单位 ms
     */
    set(key: string | number, value: any, maxAge = 0) {
        const now = maxAge ? Date.now() : 0;
        const entry = new Entry(key, value, now, maxAge);
        this.store.set(key, entry);
    }

    /**
     * 获取缓存结果
     * @param key 缓存 key
     */
    get<T = any>(key): T | null | Symbol {
        const { nil } = this;
        const entry = this.store.get(key);

        if (!entry) {
            return nil ? Cache.NIL : null;
        }

        if (entry?.isExpired()) {
            return nil ? Cache.NIL : null;
        }

        return entry.value;
    }
}

export const memoryCache = new Cache();

export const nilCache = new Cache(true);
