import os from 'os';
import low from 'lowdb';
import path from 'path';
import makeDir from 'make-dir';
import FileAsync from 'lowdb/adapters/FileAsync';
import FileSync from 'lowdb/adapters/FileSync';
import { checkFullAccess } from './fs';
const homeDir = os.homedir();

// 系统配置目录
const homeAccessible = checkFullAccess(homeDir);
// 仅当 home 目录可访问时，才使用 home 目录，否则使用临时目录
const configDir =
    homeDir && homeAccessible ? path.join(homeDir, '.config') : path.join(os.tmpdir(), '.config');

// cloudbase 配置目录
export const cloudbaseConfigDir = path.join(configDir, '.cloudbase');

// 确保目录存在
makeDir.sync(cloudbaseConfigDir);

export function getAsyncDB(file: string) {
    const dbPath = path.join(cloudbaseConfigDir, `${file}.json`);
    const adapter = new FileAsync(dbPath);
    const db = low(adapter);
    return db;
}

export function getSyncDB(file: string) {
    const dbPath = path.join(cloudbaseConfigDir, `${file}.json`);
    const adapter = new FileSync(dbPath);
    const db = low(adapter);
    return db;
}

export class LocalStore<Schema> {
    db: any
    dbKey: string
    defaults: Schema

    constructor(defaults: Schema, dbKey = 'common') {
        this.defaults = defaults;
        this.dbKey = dbKey;
    }

    async getDB() {
        const db = this.db || (await getAsyncDB(this.dbKey));
        this.db = db;
        return db;
    }

    async get(key: keyof Schema): Promise<Schema[keyof Schema]> {
        const defaultValue = this.defaults[key];
        const db = await this.getDB();
        return db.get(key).value() || defaultValue;
    }

    async set(key: keyof Schema, value: any) {
        const db = await this.getDB();
        await db.set(key, value).write();
    }

    async push(key: keyof Schema, value: any) {
        const db = await this.getDB();
        await db.get(key).push(value).write();
    }

    async delete(key: keyof Schema) {
        const db = await this.getDB();
        await db.unset(key).write();
    }
}
