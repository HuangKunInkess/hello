import fs from 'fs';
import path from 'path';
import open from 'open';
import queryString from 'query-string';
import http, { Server, IncomingMessage, ServerResponse } from 'http';
import { getPort } from '../system';
import { CloudBaseError } from '../error';

interface ServerRes {
    server: Server
    port: number
}

// 创建本地 Web 服务器，接受 Web 控制台传入的信息
async function createLocalServer(): Promise<ServerRes> {
    const server = http.createServer();
    const port = await getPort();
    return new Promise((resolve, reject) => {
        // 服务启动异常
        server.on('error', (e) => {
            reject(e);
        });

        server.listen(port, () => {
            resolve({
                port,
                server
            });
        });
    });
}

// 返回 HTML 响应
function respondWithFile(options): Promise<void> {
    const { req, res, statusCode, filename } = options;
    return new Promise(function (resolve, reject) {
        fs.readFile(path.join(__dirname, '../../', filename), function (err, response) {
            if (err) {
                return reject(err);
            }
            res.writeHead(statusCode, {
                'Content-Length': response.length,
                'Content-Type': 'text/html'
            });
            res.end(response);
            req.socket.destroy();
            return resolve();
        });
    });
}

// 获取 Web 页面 url 链接
export interface IQuery {
    [key: string]: string
}

export type GetUrlFn = (port: number) => string

export type CheckFn = (query: IQuery) => Promise<void>

// 从 Web 页面中获取数据
export async function getDataFromWeb<T extends IQuery>(
    getUrl: GetUrlFn,
    type: 'login' | 'getData'
): Promise<T> {
    const { server, port } = await createLocalServer();

    const url = getUrl(port);

    // 对 url 转码, 避免 wsl 无法正常打开地址
    // https://www.npmjs.com/package/open#url
    // https://github.com/sindresorhus/open/blob/master/index.js#L48
    try {
        await open(url, { url: true });
    } catch (e) {
        throw new CloudBaseError('打开浏览器失败，请尝试使用其他登录方式');
    }

    return new Promise((resolve) => {
        server.on('request', (req: IncomingMessage, res: ServerResponse) => {
            const { url } = req;
            const { query } = queryString.parseUrl(url);

            // 响应 HTML 文件
            if (query?.html) {
                return respondWithFile({
                    req,
                    res,
                    statusCode: 200,
                    filename: `html/${type}Success.html`
                }).then(() => {
                    server.close();
                    resolve(query as T);
                });
            }

            // CORS 响应普通文本
            res.writeHead(200, {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': '*',
                'Access-Control-Allow-Headers': '*',
                'Content-Type': 'text/plain',
                // 立即关闭 http 连接
                Connection: 'close'
            });

            res.end();

            // 防止接受到异常请求导致本地服务关闭
            if (query?.tmpToken) {
                server.close();
            }

            resolve(query as T);
        });
    });
}
