import { CloudApiService } from '@cloudbase/cloud-api';
import { getRegion } from '../config';
import { Credential, WebAuthCredential, RequestConfig } from '../types';

// 调用 env:list 接口，检查密钥是否有效
export async function checkAuth(credential: Credential, options: RequestConfig = {}) {
    // 兼容原临时秘钥
    const { secretId, secretKey, token } = resolveCredential(credential);
    const { proxy, timeout } = options;

    const region = await getRegion();

    const tcbService = new CloudApiService({
        proxy,
        timeout,
        service: 'tcb',
        credential: {
            secretId,
            secretKey,
            token
        }
    });

    return tcbService.request({
        region,
        action: 'DescribeEnvs'
    });
}

// 兼容解析旧的登录态
export function resolveCredential(
    data: Partial<Credential> & Partial<WebAuthCredential>
): Credential {
    let {
        secretId,
        secretKey,
        token,
        accessTokenExpired,
        tmpSecretId,
        tmpSecretKey,
        tmpToken,
        tmpExpired,
        expired,
        authTime,
        refreshToken,
        uin,
        hash,
        envId
    } = data;

    // 兼容旧的登录态信息
    token = token || tmpToken;
    secretId = secretId || tmpSecretId;
    secretKey = secretKey || tmpSecretKey;
    accessTokenExpired = accessTokenExpired || tmpExpired;

    return {
        secretId,
        secretKey,
        token,
        accessTokenExpired,
        expired,
        authTime,
        refreshToken,
        uin,
        hash,
        envId
    };
}

export function resolveWebCredential(credential: Credential): WebAuthCredential {
    const {
        secretId,
        secretKey,
        token,
        accessTokenExpired,
        expired,
        authTime,
        refreshToken,
        uin,
        hash
    } = credential;

    const webCredential = {
        tmpSecretId: secretId,
        tmpSecretKey: secretKey,
        tmpToken: token,
        tmpExpired: accessTokenExpired,
        expired,
        authTime,
        refreshToken,
        uin,
        hash
    };

    return webCredential;
}
