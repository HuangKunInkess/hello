import fs from 'fs';
import _ from 'lodash';
import path from 'path';
import yargs from 'yargs';
import jsonfile from 'jsonfile';
import Mustache from 'mustache';
import { loadEnvVariables } from './env';
import { loadConfig, searchConfig } from './cosmiconfig';
import { detectIndent } from './detect-indent';

import { uuid } from '../uid';
import { CloudBaseError } from '../error';
import { ICloudBaseConfig } from '../types';

const DefaultCloudBaseConfig = {
    functionRoot: './functions',
    functions: []
};

export interface ResolveOptions {
    // 指定搜索路径
    searchFrom?: string
    // 指定配置文件路径
    configPath?: string
}

/**
 * 从配置文件中解析 cloudbase 配置
 */
export async function resolveCloudBaseConfig(options: ResolveOptions): Promise<ICloudBaseConfig> {
    const { configPath, searchFrom } = options;

    const oldTcbConfig = await loadConfig({
        searchFrom,
        moduleName: 'tcb'
    });

    // 检查旧的配置文件
    if (oldTcbConfig) {
        throw new CloudBaseError('tcbrc.json 配置文件已废弃，请使用 cloudbaserc 配置文件！');
    }

    // 可能为 null
    const localCloudBaseConfig = await loadConfig({
        searchFrom,
        configPath
    });

    // localCloudBaseConfig 不为空，且不存在 envId
    if (localCloudBaseConfig && !localCloudBaseConfig.envId) {
        throw new CloudBaseError('无效的配置文件，配置文件必须包含环境 Id(envId) 字段');
    }

    const cloudbaseConfig: ICloudBaseConfig = {
        ...DefaultCloudBaseConfig,
        ...localCloudBaseConfig
    };

    // 兼容不同形式的配置
    if (cloudbaseConfig.functions?.length) {
        cloudbaseConfig.functions = cloudbaseConfig.functions?.map((func) => {
            if ((func as any).config) {
                return {
                    ...func,
                    ...(func as any).config
                };
            } else {
                return func;
            }
        });
    } else {
        cloudbaseConfig.functions = [];
    }

    return cloudbaseConfig;
}

/**
 * 从命令行和配置文件中获取 envId
 */
export async function getEnvId(commandOptions): Promise<string> {
    const envId = commandOptions?.envId;
    const configPath = commandOptions?.parent?.configFile;

    const cloudbaseConfig = await resolveCloudBaseConfig(configPath);
    // 命令行 envId 可以覆盖配置文件 envId
    const assignEnvId = envId || cloudbaseConfig?.envId;
    return assignEnvId;
}

export interface ICloudBaseOptions {
    // 默认为 process.cwd
    cwd?: string
    // 是否覆盖本地同名配置，默认为为 true
    cover?: boolean
    // 指定配置路径
    configPath?: string
}

export const renderConfig = (template: string, view: Record<string, any>) => {
    // 渲染时不 escape
    Mustache.escape = (text) => {
        // 将对象转成 JSON 字符串
        if (typeof text === 'object') {
            try {
                return JSON.stringify(text).replace(/"/g, '\\"');
            } catch (e) {
                return text;
            }
        }
        return text;
    };
    return Mustache.render(template, view, ['"{{', '}}"']);
};

// cloudbase v2+ 配置文件解析器
export class ConfigParser {
    static instance: ConfigParser

    static async get(key?: string, defaultValue?: any, options?: ICloudBaseOptions) {
        if (!ConfigParser.instance) {
            ConfigParser.instance = new ConfigParser(options);
        }
        return this.instance.options(options).get(key, defaultValue);
    }

    static async update(key?: string, value?: any, options?: ICloudBaseOptions) {
        if (!ConfigParser.instance) {
            ConfigParser.instance = new ConfigParser(options);
        }
        return this.instance.options(options).update(key, value);
    }

    // 解析配置
    static async parseRawConfig(rawConfig: Record<string, any>, cwd = process.cwd()) {
        let config = _.cloneDeep(rawConfig);

        // 命令行中指定的 envId，优先级最高
        const envId = yargs.argv.e || yargs.argv.envId;
        // 加载本地 env 文件
        const env = loadEnvVariables(cwd);

        // 转换成字符串
        let configString = JSON.stringify(config);
        const envs: any = {
            // 环境变量
            env: {
                // 注入 ENV_ID，同云端部署保持一致
                ENV_ID: envId || config.envId,
                ...env,
                ...process.env
            },
            // 云开发相关的变量
            tcb: {
                envId: envId || config.envId
            },
            util: {
                uid: uuid(24)
            }
        };

        // --envId 优先级最高
        if (envId) {
            envs.env.envId = envId;
            envs.env.ENV_ID = envId;
        }

        // 使用模板渲染
        configString = renderConfig(configString, envs);

        config = JSON.parse(configString, (key, value) => {
            if (typeof value === 'string') {
                try {
                    // 只解析对象
                    const parsed = JSON.parse(value);
                    if (typeof parsed === 'object') {
                        return parsed;
                    }
                    return value;
                } catch (e) {
                    return value;
                }
            }
            return value;
        });

        return config;
    }

    private cwd: string
    private configPath: string
    private cover: boolean

    constructor(options: ICloudBaseOptions = {}) {
        this.options(options);
    }

    // 重写内部配置
    options(options: ICloudBaseOptions = {}) {
        const { cwd = process.cwd(), cover = true, configPath } = options;
        this.cwd = cwd;
        this.cover = cover;
        this.configPath = configPath;
        return this;
    }

    // get config value by lodash object paths
    // https://lodash.com/docs/4.17.15#get
    async get<T>(key?: string, defaultValue?: T) {
        const config = await this.getConfig();

        // 不带 key，返回整个配置
        if (!key) {
            return config;
        }

        // 返回具体字段的值
        return _.get(config, key, defaultValue);
    }

    // update config value by lodash object paths
    // https://lodash.com/docs/4.17.15#set
    async update(key: string | Record<string, any>, value?: any, cover?: boolean) {
        const config = await resolveCloudBaseConfig({
            configPath: this.configPath
        });

        let unionConfig;
        // 当 value 为 undefined 且 key 为对象时，直接把 key 作为值更新到 config 中
        if (typeof value === 'undefined' && typeof key === 'object') {
            unionConfig = {
                ...config,
                ...key
            };
        } else {
            unionConfig = _.set(config, key as string, value);
        }

        await this.updateConfig(unionConfig, cover);
    }

    // 读配置，支持外部直接调用
    async getConfig() {
        // 配置文件路径不存在
        if (!this.configPath) {
            // 搜索配置，获取配置目录
            const result = await searchConfig(this.cwd);
            // 设置 config 路径
            this.configPath = result?.filepath;
        }

        // 读取原配置
        const rawConfig = await resolveCloudBaseConfig({
            configPath: this.configPath
        });

        return ConfigParser.parseRawConfig(rawConfig, this.cwd);
    }

    // 写配置
    async updateConfig(config: ICloudBaseConfig, cover = this.cover) {
        // 配置文件路径不存在
        if (!this.configPath) {
            // 搜索配置，获取配置目录
            const result = await searchConfig(this.cwd);
            // 设置 config 路径，config 可能不存在
            this.configPath = result?.filepath;
        }

        // 原配置
        const baseConfig = await loadConfig({
            searchFrom: this.cwd,
            configPath: this.configPath
        });

        const unionConfig = cover
            ? {
                  ...baseConfig,
                  ...config
              }
            : {
                  ...config,
                  ...baseConfig
              };

        let indent = 2;
        // 文件存在，检测文件缩进
        if (this.configPath) {
            const fileContent = await fs.promises.readFile(this.configPath);
            const detectRet = detectIndent(fileContent?.toString());
            indent = detectRet?.amount || indent;
        } else {
            // 配置文件可能不存在，设置配置文件路径，直接写内容
            this.configPath = path.join(this.cwd, 'cloudbaserc.json');
        }

        // 写入配置到 json 文件中
        jsonfile.writeFileSync(this.configPath, unionConfig, { spaces: indent });
    }
}
