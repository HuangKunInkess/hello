import yargs from 'yargs';
import path from 'path';
import { ConfigParser } from './cloudbase';
import { ICloudBaseConfig } from '../types';

/**
 * 获取当前目录下的 cloudbase 配置
 */
export const getCloudBaseConfig = async (configPath?: string): Promise<ICloudBaseConfig> => {
    let specificConfigPath = configPath || (yargs.argv['config-path'] as string);
    specificConfigPath = specificConfigPath ? path.resolve(specificConfigPath) : undefined;

    const parser = new ConfigParser({
        configPath: specificConfigPath
    });

    const config = await parser.get();
    return config;
};

/**
 * 从命令行参数和配置文件中读取 region
 */
export const getRegion = async (noDefault = false): Promise<string> => {
    // region 缩写
    const regionMap = {
        gz: 'ap-guangzhou',
        bj: 'ap-beijing',
        sh: 'ap-shanghai',
        nj: 'ap-nanjing',
        cd: 'ap-chengdu',
        cq: 'ap-chongqing'
    };

    // 命令行中指定的 region
    const argvRegion: string = (yargs.argv.r || yargs.argv.region) as string;
    if (argvRegion && regionMap[argvRegion]) {
        return regionMap[argvRegion];
    }

    if (argvRegion) return argvRegion as string;

    // 配置文件中的 region
    const config = await getCloudBaseConfig();
    if (config?.region && regionMap[config?.region]) {
        return regionMap[config.region];
    }

    // 不使用默认值时，不会默认返回 region
    return noDefault ? config?.region : config?.region || 'ap-shanghai';
};
