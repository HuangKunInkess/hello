import fs from 'fs';
import del from 'del';
import makeDir from 'make-dir';

import { CloudBaseError } from '../error';

/**
 * 检查路径是否可以访问（读、写）
 * @param dest 目标路径
 * @param throwError 无权限时是否抛出异常
 */
export function checkFullAccess(dest: string, throwError = false): boolean {
    try {
        // 可见、可写
        fs.accessSync(dest, fs.constants.F_OK);
        fs.accessSync(dest, fs.constants.W_OK);
        fs.accessSync(dest, fs.constants.R_OK);
        return true;
    } catch (e) {
        if (throwError) {
            throw new CloudBaseError(`路径不存在或没有权限访问：${dest}`);
        } else {
            return false;
        }
    }
}

/**
 * 检查路径是否可以读
 * @param dest 目标路径
 * @param throwError 无权限时是否抛出异常
 */
export function checkWritable(dest: string, throwError = false): boolean {
    try {
        // 可见、可写
        fs.accessSync(dest, fs.constants.F_OK);
        fs.accessSync(dest, fs.constants.W_OK);
        return true;
    } catch (e) {
        if (throwError) {
            throw new CloudBaseError(`路径不存在或没有权限访问：${dest}`);
        } else {
            return false;
        }
    }
}

/**
 * 检查路径是否可以写
 * @param dest 目标路径
 * @param throwError 无权限或路径不存在时是否抛出异常
 */
export function checkReadable(dest: string, throwError = false): boolean {
    try {
        // 可见、可读
        fs.accessSync(dest, fs.constants.F_OK);
        fs.accessSync(dest, fs.constants.R_OK);
        return true;
    } catch (e) {
        if (throwError) {
            throw new CloudBaseError(`路径不存在或没有权限访问：${dest}`);
        } else {
            return false;
        }
    }
}

/**
 * 检查指定路径是否为文件夹
 * @param dest 目标路径
 */
export function isDirectorySync(dest: string) {
    return fs.statSync(dest).isDirectory();
}

/**
 * 检查指定路径是否为文件夹，异步
 * @param dest 目标路径
 */
export async function isDirectoryAsync(dest: string) {
    const stat = await fs.promises.stat(dest);
    return stat.isDirectory();
}

export type SizeUnit = 'KB' | 'MB' | 'GB' | 'TB'

/**
 * 格式化文件大小，保留两位小数
 * @param size 原数据，单位 Byte
 * @param unit 目标单位，支持 KB、MB、GB、TB
 * @param fixed 保留小数位数，默认 2 位
 */
export function formateFileSize(size: number | string, unit: SizeUnit, fixed: number) {
    const numSize = Number(size);
    const unitMap = {
        KB: 1024,
        MB: Math.pow(1024, 2),
        GB: Math.pow(1024, 3),
        TB: Math.pow(1024, 4)
    };

    return Number(numSize / unitMap[unit]).toFixed(fixed);
}

// 创建文件夹
export function mkdirSync(dest: string) {
    makeDir.sync(dest);
}

export async function mkdirAsync(dest: string) {
    await makeDir(dest);
}

// 转换 Windows 下的反斜杠路径
export const slash = (input: string): string => {
    const isExtendedLengthPath = /^\\\\\?\\/.test(input);

    if (isExtendedLengthPath) {
        return input;
    }

    return input.replace(/\\/g, '/');
};

// 删除文件
export function delSync(patterns: string | readonly string[]) {
    let paths;
    // 不能再使用反斜杠，修复 Windows 下的问题 https://github.com/sindresorhus/del/releases/tag/v5.0.0
    if (Array.isArray(patterns)) {
        paths = patterns.map((item) => slash(item));
    } else if (typeof patterns === 'string') {
        paths = slash(patterns);
    } else {
        paths = patterns;
    }

    del.sync(paths, { force: true });
}
