"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.delSync = exports.slash = exports.mkdirAsync = exports.mkdirSync = exports.formateFileSize = exports.isDirectoryAsync = exports.isDirectorySync = exports.checkReadable = exports.checkWritable = exports.checkFullAccess = void 0;
const fs_1 = __importDefault(require("fs"));
const del_1 = __importDefault(require("del"));
const make_dir_1 = __importDefault(require("make-dir"));
const error_1 = require("../error");
function checkFullAccess(dest, throwError = false) {
    try {
        fs_1.default.accessSync(dest, fs_1.default.constants.F_OK);
        fs_1.default.accessSync(dest, fs_1.default.constants.W_OK);
        fs_1.default.accessSync(dest, fs_1.default.constants.R_OK);
        return true;
    }
    catch (e) {
        if (throwError) {
            throw new error_1.CloudBaseError(`路径不存在或没有权限访问：${dest}`);
        }
        else {
            return false;
        }
    }
}
exports.checkFullAccess = checkFullAccess;
function checkWritable(dest, throwError = false) {
    try {
        fs_1.default.accessSync(dest, fs_1.default.constants.F_OK);
        fs_1.default.accessSync(dest, fs_1.default.constants.W_OK);
        return true;
    }
    catch (e) {
        if (throwError) {
            throw new error_1.CloudBaseError(`路径不存在或没有权限访问：${dest}`);
        }
        else {
            return false;
        }
    }
}
exports.checkWritable = checkWritable;
function checkReadable(dest, throwError = false) {
    try {
        fs_1.default.accessSync(dest, fs_1.default.constants.F_OK);
        fs_1.default.accessSync(dest, fs_1.default.constants.R_OK);
        return true;
    }
    catch (e) {
        if (throwError) {
            throw new error_1.CloudBaseError(`路径不存在或没有权限访问：${dest}`);
        }
        else {
            return false;
        }
    }
}
exports.checkReadable = checkReadable;
function isDirectorySync(dest) {
    return fs_1.default.statSync(dest).isDirectory();
}
exports.isDirectorySync = isDirectorySync;
function isDirectoryAsync(dest) {
    return __awaiter(this, void 0, void 0, function* () {
        const stat = yield fs_1.default.promises.stat(dest);
        return stat.isDirectory();
    });
}
exports.isDirectoryAsync = isDirectoryAsync;
function formateFileSize(size, unit, fixed) {
    const numSize = Number(size);
    const unitMap = {
        KB: 1024,
        MB: Math.pow(1024, 2),
        GB: Math.pow(1024, 3),
        TB: Math.pow(1024, 4)
    };
    return Number(numSize / unitMap[unit]).toFixed(fixed);
}
exports.formateFileSize = formateFileSize;
function mkdirSync(dest) {
    make_dir_1.default.sync(dest);
}
exports.mkdirSync = mkdirSync;
function mkdirAsync(dest) {
    return __awaiter(this, void 0, void 0, function* () {
        yield make_dir_1.default(dest);
    });
}
exports.mkdirAsync = mkdirAsync;
const slash = (input) => {
    const isExtendedLengthPath = /^\\\\\?\\/.test(input);
    if (isExtendedLengthPath) {
        return input;
    }
    return input.replace(/\\/g, '/');
};
exports.slash = slash;
function delSync(patterns) {
    let paths;
    if (Array.isArray(patterns)) {
        paths = patterns.map((item) => exports.slash(item));
    }
    else if (typeof patterns === 'string') {
        paths = exports.slash(patterns);
    }
    else {
        paths = patterns;
    }
    del_1.default.sync(paths, { force: true });
}
exports.delSync = delSync;
