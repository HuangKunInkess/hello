"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unzipStream = exports.unzip = exports.decompress = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const decompress_1 = __importDefault(require("decompress"));
const fs_2 = require("./fs");
exports.decompress = decompress_1.default;
const unzip = (zipFile, dest) => exports.decompress(zipFile, dest);
exports.unzip = unzip;
const unzipStream = (source, dest, name = 'gape3il5rk8.zip') => __awaiter(void 0, void 0, void 0, function* () {
    yield fs_2.mkdirAsync(dest);
    const zipPath = path_1.default.join(dest, `${name}.zip`);
    const zip = fs_1.default.createWriteStream(zipPath);
    source.pipe(zip);
    return new Promise((resolve, reject) => {
        zip.on('error', reject);
        zip.on('close', () => {
            exports.unzip(zipPath, dest)
                .then(() => {
                fs_2.delSync([zipPath]);
                resolve();
            })
                .catch((e) => {
                fs_2.delSync([zipPath]);
                reject(e);
            });
        });
    });
});
exports.unzipStream = unzipStream;
