"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDataFromWeb = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const open_1 = __importDefault(require("open"));
const query_string_1 = __importDefault(require("query-string"));
const http_1 = __importDefault(require("http"));
const system_1 = require("../system");
const error_1 = require("../error");
function createLocalServer() {
    return __awaiter(this, void 0, void 0, function* () {
        const server = http_1.default.createServer();
        const port = yield system_1.getPort();
        return new Promise((resolve, reject) => {
            server.on('error', (e) => {
                reject(e);
            });
            server.listen(port, () => {
                resolve({
                    port,
                    server
                });
            });
        });
    });
}
function respondWithFile(options) {
    const { req, res, statusCode, filename } = options;
    return new Promise(function (resolve, reject) {
        fs_1.default.readFile(path_1.default.join(__dirname, '../../', filename), function (err, response) {
            if (err) {
                return reject(err);
            }
            res.writeHead(statusCode, {
                'Content-Length': response.length,
                'Content-Type': 'text/html'
            });
            res.end(response);
            req.socket.destroy();
            return resolve();
        });
    });
}
function getDataFromWeb(getUrl, type) {
    return __awaiter(this, void 0, void 0, function* () {
        const { server, port } = yield createLocalServer();
        const url = getUrl(port);
        try {
            yield open_1.default(url, { url: true });
        }
        catch (e) {
            throw new error_1.CloudBaseError('打开浏览器失败，请尝试使用其他登录方式');
        }
        return new Promise((resolve) => {
            server.on('request', (req, res) => {
                const { url } = req;
                const { query } = query_string_1.default.parseUrl(url);
                if (query === null || query === void 0 ? void 0 : query.html) {
                    return respondWithFile({
                        req,
                        res,
                        statusCode: 200,
                        filename: `html/${type}Success.html`
                    }).then(() => {
                        server.close();
                        resolve(query);
                    });
                }
                res.writeHead(200, {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': '*',
                    'Access-Control-Allow-Headers': '*',
                    'Content-Type': 'text/plain',
                    Connection: 'close'
                });
                res.end();
                if (query === null || query === void 0 ? void 0 : query.tmpToken) {
                    server.close();
                }
                resolve(query);
            });
        });
    });
}
exports.getDataFromWeb = getDataFromWeb;
