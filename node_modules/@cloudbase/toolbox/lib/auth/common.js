"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveWebCredential = exports.resolveCredential = exports.checkAuth = void 0;
const cloud_api_1 = require("@cloudbase/cloud-api");
const config_1 = require("../config");
function checkAuth(credential, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { secretId, secretKey, token } = resolveCredential(credential);
        const { proxy, timeout } = options;
        const region = yield config_1.getRegion();
        const tcbService = new cloud_api_1.CloudApiService({
            proxy,
            timeout,
            service: 'tcb',
            credential: {
                secretId,
                secretKey,
                token
            }
        });
        return tcbService.request({
            region,
            action: 'DescribeEnvs'
        });
    });
}
exports.checkAuth = checkAuth;
function resolveCredential(data) {
    let { secretId, secretKey, token, accessTokenExpired, tmpSecretId, tmpSecretKey, tmpToken, tmpExpired, expired, authTime, refreshToken, uin, hash, envId } = data;
    token = token || tmpToken;
    secretId = secretId || tmpSecretId;
    secretKey = secretKey || tmpSecretKey;
    accessTokenExpired = accessTokenExpired || tmpExpired;
    return {
        secretId,
        secretKey,
        token,
        accessTokenExpired,
        expired,
        authTime,
        refreshToken,
        uin,
        hash,
        envId
    };
}
exports.resolveCredential = resolveCredential;
function resolveWebCredential(credential) {
    const { secretId, secretKey, token, accessTokenExpired, expired, authTime, refreshToken, uin, hash } = credential;
    const webCredential = {
        tmpSecretId: secretId,
        tmpSecretKey: secretKey,
        tmpToken: token,
        tmpExpired: accessTokenExpired,
        expired,
        authTime,
        refreshToken,
        uin,
        hash
    };
    return webCredential;
}
exports.resolveWebCredential = resolveWebCredential;
