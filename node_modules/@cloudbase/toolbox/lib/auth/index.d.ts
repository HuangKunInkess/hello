import { Credential, RequestConfig } from '../types';
export * from './common';
export * from './credential';
export * from './web-auth';
export interface AuthSupevisorOptions {
    cache?: boolean;
    proxy?: string;
    timeout?: number;
}
export interface WebAuthOptions {
    throwError?: boolean;
    getAuthUrl?: (rawUrl: string) => string;
}
export declare class AuthSupevisor {
    static instance: AuthSupevisor;
    static getInstance(options?: AuthSupevisorOptions): AuthSupevisor;
    cacheCredential: Credential;
    needCache: boolean;
    cacheExpiredTime: number;
    requestConfig: RequestConfig;
    constructor(options?: AuthSupevisorOptions);
    getLoginState(): Promise<Credential>;
    loginByWebAuth(options?: WebAuthOptions): Promise<Credential>;
    loginByApiSecret(secretId?: string, secretKey?: string, token?: string): Promise<Credential>;
    logout(): Promise<void>;
    private isCacheExpire;
}
