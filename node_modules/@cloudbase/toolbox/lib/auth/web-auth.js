"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthTokenFromWeb = void 0;
const common_1 = require("./common");
const coding_1 = require("../coding");
const web_1 = require("../web");
const system_1 = require("../system");
const CliAuthBaseUrl = 'https://console.cloud.tencent.com/tcb/auth';
function getAuthTokenFromWeb(options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { getAuthUrl } = options;
        const mac = yield system_1.getMacAddress();
        const os = system_1.getOSInfo();
        const macHash = coding_1.md5Encoding(mac);
        const query = yield web_1.getDataFromWeb((port) => {
            let cliAuthUrl = `${CliAuthBaseUrl}?port=${port}&hash=${macHash}&mac=${mac}&os=${os}&from=cli`;
            if (getAuthUrl) {
                try {
                    cliAuthUrl = getAuthUrl(`${CliAuthBaseUrl}?port=${port}&hash=${macHash}&mac=${mac}&os=${os}&from=cli`);
                }
                catch (error) {
                }
            }
            return cliAuthUrl;
        }, 'login');
        const credential = common_1.resolveCredential(query);
        return credential;
    });
}
exports.getAuthTokenFromWeb = getAuthTokenFromWeb;
