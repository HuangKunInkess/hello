"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDirectorySync = exports.getDirectory = void 0;
const path_1 = __importDefault(require("path"));
const path_type_1 = require("path-type");
function getDirectory(filepath) {
    return __awaiter(this, void 0, void 0, function* () {
        const filePathIsDirectory = yield path_type_1.isDirectory(filepath);
        if (filePathIsDirectory === true) {
            return filepath;
        }
        const directory = path_1.default.dirname(filepath);
        return directory;
    });
}
exports.getDirectory = getDirectory;
function getDirectorySync(filepath) {
    const filePathIsDirectory = path_type_1.isDirectorySync(filepath);
    if (filePathIsDirectory === true) {
        return filepath;
    }
    const directory = path_1.default.dirname(filepath);
    return directory;
}
exports.getDirectorySync = getDirectorySync;
