"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultLoaders = exports.cosmiconfig = void 0;
const os_1 = __importDefault(require("os"));
const loaders_1 = require("./loaders");
const Explorer_1 = require("./Explorer");
function cosmiconfig(moduleName, options = {}) {
    const normalizedOptions = normalizeOptions(moduleName, options);
    const explorer = new Explorer_1.Explorer(normalizedOptions);
    return {
        search: explorer.search.bind(explorer),
        load: explorer.load.bind(explorer),
        clearLoadCache: explorer.clearLoadCache.bind(explorer),
        clearSearchCache: explorer.clearSearchCache.bind(explorer),
        clearCaches: explorer.clearCaches.bind(explorer)
    };
}
exports.cosmiconfig = cosmiconfig;
const defaultLoaders = Object.freeze({
    '.js': loaders_1.loaders.loadJs,
    '.json': loaders_1.loaders.loadJson,
    '.yaml': loaders_1.loaders.loadYaml,
    '.yml': loaders_1.loaders.loadYaml,
    noExt: loaders_1.loaders.loadYaml
});
exports.defaultLoaders = defaultLoaders;
function normalizeOptions(moduleName, options) {
    const defaults = {
        packageProp: moduleName,
        searchPlaces: [
            'package.json',
            `.${moduleName}rc`,
            `.${moduleName}rc.json`,
            `.${moduleName}rc.yaml`,
            `.${moduleName}rc.yml`,
            `.${moduleName}rc.js`,
            `${moduleName}.config.js`
        ],
        ignoreEmptySearchPlaces: true,
        stopDir: os_1.default.homedir(),
        cache: true,
        transform: identity,
        loaders: defaultLoaders
    };
    const normalizedOptions = Object.assign(Object.assign(Object.assign({}, defaults), options), { loaders: Object.assign(Object.assign({}, defaults.loaders), options.loaders) });
    return normalizedOptions;
}
const identity = function identity(x) {
    return x;
};
