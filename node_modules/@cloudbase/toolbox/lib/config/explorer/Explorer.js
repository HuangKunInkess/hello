"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Explorer = void 0;
const path_1 = __importDefault(require("path"));
const ExplorerBase_1 = require("./ExplorerBase");
const readFile_1 = require("./readFile");
const cacheWrapper_1 = require("./cacheWrapper");
const getDirectory_1 = require("./getDirectory");
class Explorer extends ExplorerBase_1.ExplorerBase {
    constructor(options) {
        super(options);
    }
    search(searchFrom = process.cwd()) {
        return __awaiter(this, void 0, void 0, function* () {
            const startDirectory = yield getDirectory_1.getDirectory(searchFrom);
            const result = yield this.searchFromDirectory(startDirectory);
            return result;
        });
    }
    load(filepath) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateFilePath(filepath);
            const absoluteFilePath = path_1.default.resolve(process.cwd(), filepath);
            const runLoad = () => __awaiter(this, void 0, void 0, function* () {
                const fileContents = yield readFile_1.readFile(absoluteFilePath, {
                    throwNotFound: true
                });
                const result = yield this.createCosmiconfigResult(absoluteFilePath, fileContents);
                const transformResult = yield this.config.transform(result);
                return transformResult;
            });
            if (this.loadCache) {
                return cacheWrapper_1.cacheWrapper(this.loadCache, absoluteFilePath, runLoad);
            }
            return runLoad();
        });
    }
    searchFromDirectory(dir) {
        return __awaiter(this, void 0, void 0, function* () {
            const absoluteDir = path_1.default.resolve(process.cwd(), dir);
            const run = () => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.searchDirectory(absoluteDir);
                const nextDir = this.nextDirectoryToSearch(absoluteDir, result);
                if (nextDir) {
                    return this.searchFromDirectory(nextDir);
                }
                const transformResult = yield this.config.transform(result);
                return transformResult;
            });
            if (this.searchCache) {
                return cacheWrapper_1.cacheWrapper(this.searchCache, absoluteDir, run);
            }
            return run();
        });
    }
    searchDirectory(dir) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const place of this.config.searchPlaces) {
                const placeResult = yield this.loadSearchPlace(dir, place);
                if (this.shouldSearchStopWithResult(placeResult) === true) {
                    return placeResult;
                }
            }
            return null;
        });
    }
    loadSearchPlace(dir, place) {
        return __awaiter(this, void 0, void 0, function* () {
            const filepath = path_1.default.join(dir, place);
            const fileContents = yield readFile_1.readFile(filepath);
            const result = yield this.createCosmiconfigResult(filepath, fileContents);
            return result;
        });
    }
    loadFileContent(filepath, content) {
        return __awaiter(this, void 0, void 0, function* () {
            if (content === null) {
                return null;
            }
            if (content.trim() === '') {
                return undefined;
            }
            const loader = this.getLoaderEntryForFile(filepath);
            const loaderResult = yield loader(filepath, content);
            return loaderResult;
        });
    }
    createCosmiconfigResult(filepath, content) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileContent = yield this.loadFileContent(filepath, content);
            const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);
            return result;
        });
    }
}
exports.Explorer = Explorer;
