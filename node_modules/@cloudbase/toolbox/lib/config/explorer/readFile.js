"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFileSync = exports.readFile = void 0;
const fs_1 = __importDefault(require("fs"));
function fsReadFileAsync(pathname, encoding) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs_1.default.readFile(pathname, encoding, (error, contents) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(contents);
            });
        });
    });
}
function readFile(filepath, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const throwNotFound = options.throwNotFound === true;
        try {
            const content = yield fsReadFileAsync(filepath, 'utf8');
            return content;
        }
        catch (error) {
            if (throwNotFound === false && error.code === 'ENOENT') {
                return null;
            }
            throw error;
        }
    });
}
exports.readFile = readFile;
function readFileSync(filepath, options = {}) {
    const throwNotFound = options.throwNotFound === true;
    try {
        const content = fs_1.default.readFileSync(filepath, 'utf8');
        return content;
    }
    catch (error) {
        if (throwNotFound === false && error.code === 'ENOENT') {
            return null;
        }
        throw error;
    }
}
exports.readFileSync = readFileSync;
