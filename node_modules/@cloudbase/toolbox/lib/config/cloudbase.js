"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigParser = exports.renderConfig = exports.getEnvId = exports.resolveCloudBaseConfig = void 0;
const fs_1 = __importDefault(require("fs"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const yargs_1 = __importDefault(require("yargs"));
const jsonfile_1 = __importDefault(require("jsonfile"));
const mustache_1 = __importDefault(require("mustache"));
const env_1 = require("./env");
const cosmiconfig_1 = require("./cosmiconfig");
const detect_indent_1 = require("./detect-indent");
const uid_1 = require("../uid");
const error_1 = require("../error");
const DefaultCloudBaseConfig = {
    functionRoot: './functions',
    functions: []
};
function resolveCloudBaseConfig(options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const { configPath, searchFrom } = options;
        const oldTcbConfig = yield cosmiconfig_1.loadConfig({
            searchFrom,
            moduleName: 'tcb'
        });
        if (oldTcbConfig) {
            throw new error_1.CloudBaseError('tcbrc.json 配置文件已废弃，请使用 cloudbaserc 配置文件！');
        }
        const localCloudBaseConfig = yield cosmiconfig_1.loadConfig({
            searchFrom,
            configPath
        });
        if (localCloudBaseConfig && !localCloudBaseConfig.envId) {
            throw new error_1.CloudBaseError('无效的配置文件，配置文件必须包含环境 Id(envId) 字段');
        }
        const cloudbaseConfig = Object.assign(Object.assign({}, DefaultCloudBaseConfig), localCloudBaseConfig);
        if ((_a = cloudbaseConfig.functions) === null || _a === void 0 ? void 0 : _a.length) {
            cloudbaseConfig.functions = (_b = cloudbaseConfig.functions) === null || _b === void 0 ? void 0 : _b.map((func) => {
                if (func.config) {
                    return Object.assign(Object.assign({}, func), func.config);
                }
                else {
                    return func;
                }
            });
        }
        else {
            cloudbaseConfig.functions = [];
        }
        return cloudbaseConfig;
    });
}
exports.resolveCloudBaseConfig = resolveCloudBaseConfig;
function getEnvId(commandOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const envId = commandOptions === null || commandOptions === void 0 ? void 0 : commandOptions.envId;
        const configPath = (_a = commandOptions === null || commandOptions === void 0 ? void 0 : commandOptions.parent) === null || _a === void 0 ? void 0 : _a.configFile;
        const cloudbaseConfig = yield resolveCloudBaseConfig(configPath);
        const assignEnvId = envId || (cloudbaseConfig === null || cloudbaseConfig === void 0 ? void 0 : cloudbaseConfig.envId);
        return assignEnvId;
    });
}
exports.getEnvId = getEnvId;
const renderConfig = (template, view) => {
    mustache_1.default.escape = (text) => {
        if (typeof text === 'object') {
            try {
                return JSON.stringify(text).replace(/"/g, '\\"');
            }
            catch (e) {
                return text;
            }
        }
        return text;
    };
    return mustache_1.default.render(template, view, ['"{{', '}}"']);
};
exports.renderConfig = renderConfig;
class ConfigParser {
    constructor(options = {}) {
        this.options(options);
    }
    static get(key, defaultValue, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ConfigParser.instance) {
                ConfigParser.instance = new ConfigParser(options);
            }
            return this.instance.options(options).get(key, defaultValue);
        });
    }
    static update(key, value, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ConfigParser.instance) {
                ConfigParser.instance = new ConfigParser(options);
            }
            return this.instance.options(options).update(key, value);
        });
    }
    static parseRawConfig(rawConfig, cwd = process.cwd()) {
        return __awaiter(this, void 0, void 0, function* () {
            let config = lodash_1.default.cloneDeep(rawConfig);
            const envId = yargs_1.default.argv.e || yargs_1.default.argv.envId;
            const env = env_1.loadEnvVariables(cwd);
            let configString = JSON.stringify(config);
            const envs = {
                env: Object.assign(Object.assign({ ENV_ID: envId || config.envId }, env), process.env),
                tcb: {
                    envId: envId || config.envId
                },
                util: {
                    uid: uid_1.uuid(24)
                }
            };
            if (envId) {
                envs.env.envId = envId;
                envs.env.ENV_ID = envId;
            }
            configString = exports.renderConfig(configString, envs);
            config = JSON.parse(configString, (key, value) => {
                if (typeof value === 'string') {
                    try {
                        const parsed = JSON.parse(value);
                        if (typeof parsed === 'object') {
                            return parsed;
                        }
                        return value;
                    }
                    catch (e) {
                        return value;
                    }
                }
                return value;
            });
            return config;
        });
    }
    options(options = {}) {
        const { cwd = process.cwd(), cover = true, configPath } = options;
        this.cwd = cwd;
        this.cover = cover;
        this.configPath = configPath;
        return this;
    }
    get(key, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.getConfig();
            if (!key) {
                return config;
            }
            return lodash_1.default.get(config, key, defaultValue);
        });
    }
    update(key, value, cover) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield resolveCloudBaseConfig({
                configPath: this.configPath
            });
            let unionConfig;
            if (typeof value === 'undefined' && typeof key === 'object') {
                unionConfig = Object.assign(Object.assign({}, config), key);
            }
            else {
                unionConfig = lodash_1.default.set(config, key, value);
            }
            yield this.updateConfig(unionConfig, cover);
        });
    }
    getConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.configPath) {
                const result = yield cosmiconfig_1.searchConfig(this.cwd);
                this.configPath = result === null || result === void 0 ? void 0 : result.filepath;
            }
            const rawConfig = yield resolveCloudBaseConfig({
                configPath: this.configPath
            });
            return ConfigParser.parseRawConfig(rawConfig, this.cwd);
        });
    }
    updateConfig(config, cover = this.cover) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.configPath) {
                const result = yield cosmiconfig_1.searchConfig(this.cwd);
                this.configPath = result === null || result === void 0 ? void 0 : result.filepath;
            }
            const baseConfig = yield cosmiconfig_1.loadConfig({
                searchFrom: this.cwd,
                configPath: this.configPath
            });
            const unionConfig = cover
                ? Object.assign(Object.assign({}, baseConfig), config) : Object.assign(Object.assign({}, config), baseConfig);
            let indent = 2;
            if (this.configPath) {
                const fileContent = yield fs_1.default.promises.readFile(this.configPath);
                const detectRet = detect_indent_1.detectIndent(fileContent === null || fileContent === void 0 ? void 0 : fileContent.toString());
                indent = (detectRet === null || detectRet === void 0 ? void 0 : detectRet.amount) || indent;
            }
            else {
                this.configPath = path_1.default.join(this.cwd, 'cloudbaserc.json');
            }
            jsonfile_1.default.writeFileSync(this.configPath, unionConfig, { spaces: indent });
        });
    }
}
exports.ConfigParser = ConfigParser;
