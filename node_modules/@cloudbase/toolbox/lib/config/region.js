"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegion = exports.getCloudBaseConfig = void 0;
const yargs_1 = __importDefault(require("yargs"));
const path_1 = __importDefault(require("path"));
const cloudbase_1 = require("./cloudbase");
const getCloudBaseConfig = (configPath) => __awaiter(void 0, void 0, void 0, function* () {
    let specificConfigPath = configPath || yargs_1.default.argv['config-path'];
    specificConfigPath = specificConfigPath ? path_1.default.resolve(specificConfigPath) : undefined;
    const parser = new cloudbase_1.ConfigParser({
        configPath: specificConfigPath
    });
    const config = yield parser.get();
    return config;
});
exports.getCloudBaseConfig = getCloudBaseConfig;
const getRegion = (noDefault = false) => __awaiter(void 0, void 0, void 0, function* () {
    const regionMap = {
        gz: 'ap-guangzhou',
        bj: 'ap-beijing',
        sh: 'ap-shanghai',
        nj: 'ap-nanjing',
        cd: 'ap-chengdu',
        cq: 'ap-chongqing'
    };
    const argvRegion = (yargs_1.default.argv.r || yargs_1.default.argv.region);
    if (argvRegion && regionMap[argvRegion]) {
        return regionMap[argvRegion];
    }
    if (argvRegion)
        return argvRegion;
    const config = yield exports.getCloudBaseConfig();
    if ((config === null || config === void 0 ? void 0 : config.region) && regionMap[config === null || config === void 0 ? void 0 : config.region]) {
        return regionMap[config.region];
    }
    return noDefault ? config === null || config === void 0 ? void 0 : config.region : (config === null || config === void 0 ? void 0 : config.region) || 'ap-shanghai';
});
exports.getRegion = getRegion;
