declare const _default: ({
    name: string;
    key: string;
    detect: {
        path: string;
        match: string;
    }[];
    plugin: string;
    config: {
        buildCommand: {
            value: string;
            desc: string;
        };
        outputPath: {
            value: string;
            desc: string;
        };
        path?: undefined;
        name?: undefined;
        entry?: undefined;
        functionRootPath?: undefined;
        serviceName?: undefined;
        servicePath?: undefined;
        containerPort?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: {
        path: string;
        exists: boolean;
    }[];
    plugin: string;
    config: {
        buildCommand: {
            value: string;
            desc: string;
        };
        outputPath: {
            value: string;
            desc: string;
        };
        path?: undefined;
        name?: undefined;
        entry?: undefined;
        functionRootPath?: undefined;
        serviceName?: undefined;
        servicePath?: undefined;
        containerPort?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: {
        path: string;
        match: string;
    }[];
    plugin: string;
    config: {
        buildCommand: {
            value: string;
            desc: string;
        };
        path: {
            value: string;
            desc: string;
        };
        outputPath?: undefined;
        name?: undefined;
        entry?: undefined;
        functionRootPath?: undefined;
        serviceName?: undefined;
        servicePath?: undefined;
        containerPort?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: {
        path: string;
        match: string;
    }[];
    plugin: string;
    config: {
        name: {
            value: string;
            desc: string;
        };
        path: {
            value: string;
            desc: string;
        };
        entry: {
            value: string;
            desc: string;
        };
        buildCommand?: undefined;
        outputPath?: undefined;
        functionRootPath?: undefined;
        serviceName?: undefined;
        servicePath?: undefined;
        containerPort?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: {
        path: string;
        exists: boolean;
    }[];
    plugin: string;
    config: {
        outputPath: {
            value: string;
            desc: string;
        };
        buildCommand?: undefined;
        path?: undefined;
        name?: undefined;
        entry?: undefined;
        functionRootPath?: undefined;
        serviceName?: undefined;
        servicePath?: undefined;
        containerPort?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: ({
        path: string;
        exists: boolean;
        match?: undefined;
    } | {
        path: string;
        match: string;
        exists?: undefined;
    })[];
    plugin: string;
    config: {
        functionRootPath: {
            value: string;
            desc: string;
        };
        buildCommand?: undefined;
        outputPath?: undefined;
        path?: undefined;
        name?: undefined;
        entry?: undefined;
        serviceName?: undefined;
        servicePath?: undefined;
        containerPort?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: {
        path: string;
        exists: boolean;
    }[];
    plugin: string;
    config: {
        serviceName: {
            value: string;
            desc: string;
        };
        servicePath: {
            value: string;
            desc: string;
        };
        containerPort: {
            value: number;
            desc: string;
        };
        buildCommand?: undefined;
        outputPath?: undefined;
        path?: undefined;
        name?: undefined;
        entry?: undefined;
        functionRootPath?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: {
        path: string;
        match: string;
    }[];
    plugin: string;
    config: {
        appid: {
            value: string;
            desc: string;
        };
        privateKeyPath: {
            value: string;
            desc: string;
        };
        buildCommand?: undefined;
        outputPath?: undefined;
        path?: undefined;
        name?: undefined;
        entry?: undefined;
        functionRootPath?: undefined;
        serviceName?: undefined;
        servicePath?: undefined;
        containerPort?: undefined;
        framework?: undefined;
    };
} | {
    name: string;
    key: string;
    detect: {
        path: string;
        match: string;
    }[];
    plugin: string;
    config: {
        serviceName: {
            value: string;
            desc: string;
        };
        servicePath: {
            value: string;
            desc: string;
        };
        framework: {
            value: string;
            desc: string;
        };
        buildCommand?: undefined;
        outputPath?: undefined;
        path?: undefined;
        name?: undefined;
        entry?: undefined;
        functionRootPath?: undefined;
        containerPort?: undefined;
        appid?: undefined;
        privateKeyPath?: undefined;
    };
})[];
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
export default _default;
//# sourceMappingURL=frameworks.d.ts.map