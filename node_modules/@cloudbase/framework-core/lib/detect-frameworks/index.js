"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detect = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const frameworks_1 = __importDefault(require("./frameworks"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importStar(require("path"));
const logger_1 = __importDefault(require("../logger"));
function detect(projectRootPath, projectConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const logger = logger_1.default();
        const frameworks = [];
        const finalFrameworksInfo = renderFrameworkConfig(frameworks_1.default, {
            projectConfig,
            baseName: path_1.default.basename(projectRootPath),
        });
        for (const framework of finalFrameworksInfo) {
            for (const detect of framework.detect) {
                try {
                    const { path, match, exists } = detect;
                    let matchedFramework;
                    if (typeof match !== 'undefined') {
                        const content = yield fs_1.default.promises.readFile(path_1.resolve(projectRootPath, path), 'utf-8');
                        const matchResult = content.match(new RegExp(match));
                        if (matchResult) {
                            matchedFramework = matchResult;
                        }
                    }
                    else if (typeof exists === 'boolean') {
                        const fileExists = fs_1.default.existsSync(path_1.resolve(projectRootPath, path));
                        matchedFramework = exists ? fileExists : !fileExists;
                    }
                    if (matchedFramework) {
                        if (frameworks.findIndex((item) => item.plugin === framework.plugin) < 0) {
                            frameworks.push(framework);
                        }
                    }
                }
                catch (e) {
                    logger.debug(e);
                }
            }
        }
        return frameworks;
    });
}
exports.detect = detect;
function renderFrameworkConfig(frameworkConfig, data) {
    if (!frameworks_1.default)
        return;
    return JSON.parse(JSON.stringify(frameworkConfig, (key, value) => {
        if (typeof value === 'string' && value.includes('`')) {
            return new Function('data', `return ${value}`)(data);
        }
        return value;
    }));
}
