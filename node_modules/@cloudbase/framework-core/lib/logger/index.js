"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogFilePath = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const winston_1 = __importStar(require("winston"));
const util_1 = require("util");
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const toolbox_1 = require("@cloudbase/toolbox");
const format_1 = require("../utils/format");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const gradient = require('gradient-string');
const LOG_PATH = path_1.default.join(os_1.default.homedir(), 'cloudbase-framework/logs');
chalk_1.default.level = 1;
let logger;
const logFilePath = path_1.default.join(LOG_PATH, `${format_1.formatDateTime(new Date())}.log`);
const startTime = new Date();
function getLogger(level) {
    const isCI = !!process.env.CLOUDBASE_CIID;
    if (!logger) {
        // 初始化 logger
        try {
            toolbox_1.mkdirSync(LOG_PATH);
        }
        catch (e) { }
        logger = winston_1.default.createLogger({
            level: level || 'info',
            transports: isCI
                ? new winston_1.default.transports.Console({
                    format: winston_1.format.printf((info) => {
                        const splat = info[Symbol.for('splat')];
                        return (`${new Date()} ${((new Date().valueOf() - startTime.valueOf()) /
                            1000).toFixed(1)} CloudBase Framework::${info.level} ${info.message}` + (splat ? ` ${splat.map(util_1.inspect).join(' ')} ` : ''));
                    }),
                })
                : [
                    new winston_1.default.transports.Console({
                        format: winston_1.format.combine(winston_1.format.cli(), winston_1.format.printf((info) => {
                            const splat = info[Symbol.for('splat')];
                            return (`${chalk_1.default.bold(gradient(['cyan', 'rgb(0, 111, 150)', 'rgb(0, 246,136)'])(' CloudBase Framework '))} ${info.level} ${info.message}` +
                                (splat ? ` ${splat.map(util_1.inspect).join(' ')} ` : ''));
                        })),
                    }),
                    new winston_1.default.transports.File({
                        filename: logFilePath,
                        level: 'debug',
                        format: winston_1.format.printf((info) => {
                            const splat = info[Symbol.for('splat')];
                            return (`${new Date()} ${((new Date().valueOf() - startTime.valueOf()) /
                                1000).toFixed(1)} CloudBase Framework::${info.level} ${info.message}` + (splat ? ` ${splat.map(util_1.inspect).join(' ')} ` : ''));
                        }),
                    }),
                ],
        });
    }
    if (level) {
        logger.level = level;
    }
    return logger;
}
exports.default = getLogger;
/**
 * 查询日志地址
 */
function getLogFilePath() {
    return logFilePath;
}
exports.getLogFilePath = getLogFilePath;
