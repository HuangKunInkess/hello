/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
import PluginManager from './plugin-manager';
import Context from './context';
import { CloudBaseFrameworkConfig, Config } from './types';
import { SamManager } from './sam';
import Hooks from './hooks';
import LifeCycleManager from './lifecycle';
export { default as Plugin } from './plugin';
export { default as PluginServiceApi } from './plugin-service-api';
export { Builder } from './builder';
export { Deployer } from './deployer';
export { CloudApi } from './api';
export * from './types';
interface CommandParams {
    runCommandKey?: string;
}
/**
 *
 * 提供 CLI 调用
 *
 * @param cloudBaseFrameworkConfig
 * @param command
 * @param module
 * @param params
 */
export declare function run(cloudBaseFrameworkConfig: CloudBaseFrameworkConfig, command?: 'deploy', module?: string, params?: CommandParams): Promise<void>;
/**
 * CloudBase Framework 核心实现类
 */
export declare class CloudBaseFrameworkCore {
    frameworkConfig: CloudBaseFrameworkConfig;
    pluginManager: PluginManager;
    samManager: SamManager;
    appConfig: Config;
    hooks: Hooks;
    projectInfo: Record<string, any> | undefined;
    ciId: string;
    context: Context;
    lifeCycleManager: LifeCycleManager;
    isDeploy: boolean;
    constructor(frameworkConfig: CloudBaseFrameworkConfig);
    init(isDeploy: boolean): Promise<void>;
    /**
     * 调用命令
     *
     * @param module
     * @param params
     */
    run(module?: string, params?: CommandParams): Promise<void>;
    /**
     * 编译应用
     *
     * @param module
     * @param params
     */
    compile(module?: string, params?: any): Promise<void>;
    /**
     * 编译并部署应用
     * @param module
     * @param params
     */
    deploy(module?: string, params?: any): Promise<void>;
    generateSamMeta(): ({
        SourceUrl: string;
        SourceDir: string;
        SourceBranch: string;
        Name: string;
        Version: string;
        DisplayName: string;
        Description: string;
        Tags: string[];
        Globals: {
            Environment: {
                Variables: Record<string, string>;
            };
        };
    } & Record<string, any>) | ({
        Name: string;
        Version: string;
        DisplayName: string;
        Description: string;
        Tags: string[];
        Globals: {
            Environment: {
                Variables: Record<string, string>;
            };
        };
    } & Record<string, any>);
    createProjectVersion(): Promise<any>;
    transpileEnvironments(environment: Record<string, string>): {
        Key: string;
        Value: string;
    }[];
    /**
     * 编译 SAM
     * @param module
     */
    private _compile;
    private genNetworkSAM;
}
//# sourceMappingURL=index.d.ts.map