"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Generator = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const ejs_1 = __importDefault(require("ejs"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const renderFile = util_1.promisify(ejs_1.default.renderFile);
class Generator {
    // 复制文件
    generate(templates, distDir, data) {
        return __awaiter(this, void 0, void 0, function* () {
            fs_extra_1.default.ensureDirSync(distDir);
            const destFiles = [];
            yield fs_extra_1.default.copy(templates, distDir, {
                filter(src, dest) {
                    destFiles.push(dest);
                    return true;
                },
            });
            return Promise.all(destFiles
                .filter((file) => fs_1.default.lstatSync(file).isFile())
                .map((file) => renderFile(file, data).then((content) => fs_extra_1.default.writeFile(file, content))));
        });
    }
}
exports.Generator = Generator;
