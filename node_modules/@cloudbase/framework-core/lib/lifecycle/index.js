"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const logger_1 = require("../logger");
const app_1 = require("../api/app");
class LifeCycleManager {
    constructor(context) {
        this.context = context;
    }
    /**
     * 上报构建日志和状态
     *
     * @param status
     * @param failReason
     */
    reportBuildResult(status, failReason, failType) {
        return __awaiter(this, void 0, void 0, function* () {
            let buildLog = '';
            try {
                buildLog = yield this.getBuildLog();
            }
            catch (e) { }
            return app_1.reportCloudBaseCIResultCallback({
                ciId: this.context.ciId,
                extensionId: this.context.extensionId,
                status,
                failReason,
                buildLog: buildLog.slice(0, 60 * 1000),
                failType,
            });
        });
    }
    /**
     * 查询本地构建日志
     */
    getBuildLog() {
        return __awaiter(this, void 0, void 0, function* () {
            const logFilePath = logger_1.getLogFilePath();
            return util_1.promisify(fs_1.default.readFile)(logFilePath, 'utf-8');
        });
    }
}
exports.default = LifeCycleManager;
