"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudApi = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const cloud_api_1 = require("@cloudbase/cloud-api");
const toolbox_1 = require("@cloudbase/toolbox");
const getCredential = () => __awaiter(void 0, void 0, void 0, function* () {
    const credential = yield toolbox_1.getCredentialWithoutCheck();
    if (!credential) {
        throw new Error('无有效身份信息，请使用 cloudbase login 登录');
    }
    return Object.assign(Object.assign({}, credential), { tokenExpired: credential.accessTokenExpired });
});
class CloudApi {
    constructor() { }
    static init({ envId }) {
        return __awaiter(this, void 0, void 0, function* () {
            const proxy = toolbox_1.getProxy();
            const region = yield toolbox_1.getRegion();
            CloudApi.envId = envId;
            CloudApi.tcbService = new cloud_api_1.CloudApiService(Object.assign(Object.assign({ service: 'tcb', getCredential, baseParams: { EnvId: envId } }, (region ? { region } : {})), (proxy ? { proxy } : {})));
            CloudApi.tcbUinService = new cloud_api_1.CloudApiService(Object.assign(Object.assign({ service: 'tcb', getCredential }, (region ? { region } : {})), (proxy ? { proxy } : {})));
        });
    }
}
exports.CloudApi = CloudApi;
CloudApi.fetchStream = cloud_api_1.fetchStream;
CloudApi.fetch = cloud_api_1.fetch;
