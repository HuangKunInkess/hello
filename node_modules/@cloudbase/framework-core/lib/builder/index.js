"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Builder = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const path_1 = require("path");
const fs_extra_1 = __importDefault(require("fs-extra"));
const logger_1 = __importDefault(require("../logger"));
const path_2 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const generator_1 = require("../generator");
class Builder {
    constructor(options) {
        const { type, projectPath } = options;
        this.distDirName = `cloudbase-${type}-build-${new Date().getTime()}`;
        this.projectDir = projectPath;
        const buildsDir = path_2.default.join(os_1.default.homedir(), 'cloudbase-framework/builds');
        this.distDir = path_1.resolve(buildsDir, this.distDirName);
        this.logger = logger_1.default();
        this.generator = new generator_1.Generator();
    }
    clean() {
        return __awaiter(this, void 0, void 0, function* () {
            return fs_extra_1.default.remove(this.distDir);
        });
    }
}
exports.Builder = Builder;
