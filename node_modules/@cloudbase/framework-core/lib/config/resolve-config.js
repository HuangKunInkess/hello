"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const type_check_1 = require("../utils/type-check");
const detect_frameworks_1 = require("../detect-frameworks");
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const toolbox_1 = require("@cloudbase/toolbox");
const app_1 = require("../api/app");
const logger_1 = __importDefault(require("../logger"));
const link_1 = require("../utils/link");
const validate_1 = require("./validate");
const error_1 = require("../error");
chalk_1.default.level = 1;
const FRAMEWORK_CONFIG_FILENAME = 'cloudbase-framework.json';
const DEFAULT_CONFIG = {
    envId: '',
    version: '2.0',
    $schema: 'https://framework-1258016615.tcloudbaseapp.com/schema/latest.json',
};
function resolveConfig(projectPath, config, envId) {
    return __awaiter(this, void 0, void 0, function* () {
        const logger = logger_1.default();
        const isCloudBuild = !!process.env.CLOUDBASE_CIID;
        if (isCloudBuild) {
            logger.debug('TriggerBuildEnvs', process.env);
        }
        // 解析配置文件
        const { rcConfig, extraData, projectName, originProjectInfo, } = yield resolveRcConfig(projectPath, config, envId);
        // 针对 cloudbaserc.js 等脚本文件，会创建一份单独的 json 配置文件
        const independentFrameworkConfig = yield readFrameworkConfig(projectPath);
        let originFrameworkConfig = independentFrameworkConfig || (rcConfig === null || rcConfig === void 0 ? void 0 : rcConfig.framework);
        let finalFrameworkConfig = originFrameworkConfig;
        if (!Object.keys((originFrameworkConfig === null || originFrameworkConfig === void 0 ? void 0 : originFrameworkConfig.plugins) || {}).length) {
            logger.debug('检测项目框架');
            const detectedFrameworks = yield detect_frameworks_1.detect(projectPath, rcConfig);
            let plugins = {};
            let projectName = originFrameworkConfig === null || originFrameworkConfig === void 0 ? void 0 : originFrameworkConfig.name;
            if (detectedFrameworks.length) {
                for (let item of detectedFrameworks) {
                    const answer = yield promptModify(item);
                    let inputs;
                    if (answer.isModifyConfig) {
                        inputs = yield modifyFrameworkConfig(item.config);
                    }
                    else {
                        inputs = {};
                        if (type_check_1.isObject(item.config)) {
                            inputs = Object.entries(item.config).reduce((prev, cur) => {
                                prev[cur[0]] = cur[1].value;
                                return prev;
                            }, {});
                        }
                    }
                    plugins[item.key] = {
                        use: item.plugin,
                        inputs,
                    };
                }
            }
            else {
                logger.warn('未检测到项目 plugins 设置，请手动填写配置文件');
            }
            if (!projectName) {
                const nameAnswer = yield collectAppName(projectPath);
                projectName = nameAnswer;
            }
            finalFrameworkConfig = Object.assign({}, originFrameworkConfig, {
                name: projectName,
                plugins,
            });
        }
        if (projectName !== (originFrameworkConfig === null || originFrameworkConfig === void 0 ? void 0 : originFrameworkConfig.name)) {
            finalFrameworkConfig = Object.assign({}, originFrameworkConfig, finalFrameworkConfig, {
                name: projectName,
            });
        }
        // 检查是否要写入配置文件
        //  是否写入配置文件
        const isRcConfigChanged = rcConfig !== config;
        const isFrameworkConfigChanged = finalFrameworkConfig !== originFrameworkConfig;
        logger.debug('RC 配置文件变更', isRcConfigChanged, rcConfig);
        logger.debug('Framework 配置文件变更', isFrameworkConfigChanged, finalFrameworkConfig);
        if (!isCloudBuild && (isRcConfigChanged || isFrameworkConfigChanged)) {
            const answer = yield promptWriteConfig();
            if (answer.isWriteConfig) {
                yield writeConfig(projectPath, isRcConfigChanged && rcConfig, isFrameworkConfigChanged && finalFrameworkConfig);
            }
        }
        if (!Object.keys(finalFrameworkConfig.plugins || {}).length) {
            process.exit();
        }
        const validateRes = validate_1.validate(Object.assign({}, rcConfig, {
            framework: finalFrameworkConfig,
        }));
        if (!validateRes.result) {
            throw new error_1.CloudBaseFrameworkError(`cloudbaserc.json 文件校验失败 ${validateRes.errorText}`, error_1.ERRORS.CONFIG_VALIDATE_ERROR);
        }
        logger.info('Validate config file success.');
        return {
            // 合并配置
            appConfig: lodash_merge_1.default({}, finalFrameworkConfig, extraData),
            originProjectInfo,
        };
    });
}
exports.default = resolveConfig;
function getCloudProjectInfo(projectName) {
    return __awaiter(this, void 0, void 0, function* () {
        let projectData;
        // 如果远程存在配置
        if (projectName) {
            const projectList = (yield app_1.describeCloudBaseProjectLatestVersionList({
                ProjectName: projectName,
            })).ProjectList;
            if (projectList.length) {
                const projectInfo = projectList[0];
                projectData = getProjectDataFromProjectInfo(projectInfo);
            }
            return projectData;
        }
    });
}
function getProjectDataFromProjectInfo(projectInfo) {
    const { Tags, Parameters, Source, AddonConfig, NetworkConfig, Name, RcJson, } = projectInfo;
    return {
        rcConfig: jsonParse(RcJson),
        extraData: {
            repo: Source,
            tags: Tags,
            environment: Parameters.reduce((prev, cur) => {
                const { Value, Key } = cur;
                prev[Key] = Value;
                return prev;
            }, {}),
            network: jsonParse(NetworkConfig),
            addons: jsonParse(AddonConfig),
        },
        projectName: Name,
        originProjectInfo: projectInfo,
    };
}
function resolveRcConfig(projectPath, config, envId) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        const logger = logger_1.default();
        let rcConfig = config;
        let extraData = {};
        let projectName = (_a = config === null || config === void 0 ? void 0 : config.framework) === null || _a === void 0 ? void 0 : _a.name;
        let originProjectInfo;
        // 如果是云端构建，addon 等信息环境变量中读取，配置优先读取本地，再读取环境变量中的信息
        if (process.env.CLOUDBASE_CIID) {
            logger.debug('云端构建场景');
            logger.debug('process.env', process.env);
            const cloudRcJSON = jsonParse(process.env.TCB_RC_JSON);
            extraData = getCIProjectInfo();
            rcConfig =
                rcConfig ||
                    (cloudRcJSON &&
                        (yield toolbox_1.ConfigParser.parseRawConfig(cloudRcJSON)));
            // 如果是本地构建，且本地存在配置文件
        }
        else if (config === null || config === void 0 ? void 0 : config.framework) {
            logger.debug('本地构建，本地存在配置文件', config);
            if (!projectName) {
                projectName = yield collectAppName(projectPath);
            }
            let cloudProjectInfo = yield getCloudProjectInfo(projectName);
            // 如果远程存在同名项目，使用远程data配置和项目名
            if (cloudProjectInfo) {
                logger.debug('远程存在同名项目', cloudProjectInfo.projectName);
                extraData = cloudProjectInfo.extraData;
                originProjectInfo = cloudProjectInfo.originProjectInfo;
                // 远程没有同名项目，新建项目
            }
            else {
                logger.debug('远程不存在同名项目，新建项目');
                if ((_d = (_c = (_b = config.framework) === null || _b === void 0 ? void 0 : _b.requirement) === null || _c === void 0 ? void 0 : _c.addons) === null || _d === void 0 ? void 0 : _d.length) {
                    throw new Error(`本地 CLI 暂不支持创建 cloudbaserc.json 中包含 Addon 配置的项目，请通过云端一键部署来创建项目
  参考文档地址： ${link_1.genClickableLink('https://docs.cloudbase.net/framework/deploy-button.html')}`);
                }
                extraData = {};
            }
            // 如果本地构建，且没有配置文件
        }
        else {
            logger.debug('本地构建，本地不存在配置文件', config);
            // 没有选择项目，新建项目, 配置使用模板
            projectName = yield collectAppName(projectPath);
            extraData = {};
            rcConfig = Object.assign({}, DEFAULT_CONFIG, config, {
                envId,
                framework: {
                    name: projectName,
                    plugins: {},
                },
            });
        }
        logger.debug('项目配置信息', 'rcConfig', rcConfig, 'extraData', extraData, 'projectName', projectName);
        return {
            rcConfig,
            extraData,
            projectName,
            originProjectInfo,
        };
    });
}
function collectAppName(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const logger = logger_1.default();
        let name = path_1.default.basename(projectPath);
        let nameAnswer = yield inquirer_1.default.prompt({
            type: 'input',
            name: 'name',
            message: '请输入应用唯一标识(支持 A-Z a-z 0-9 及 -, 同一环境下不能相同)',
            default: name,
        });
        let pattern = /^[A-Za-z0-9-]*$/;
        if (!pattern.exec(nameAnswer.name) || nameAnswer.name.length > 16) {
            logger.info('请输入正确的应用名称，支持 A-Z a-z 0-9 及 -, 只能用字母开头，最长 16 位');
            return yield collectAppName(projectPath);
        }
        return nameAnswer.name;
    });
}
function jsonParse(str) {
    let json;
    try {
        json = str ? JSON.parse(str) : undefined;
    }
    catch (e) {
        throw new Error(`JSON 格式错误: ${str}`);
    }
    return json;
}
function getCIProjectInfo() {
    return {
        repo: jsonParse(process.env.TCB_CODE_REPO),
        tags: jsonParse(process.env.TCB_TAGS),
        environment: jsonParse(process.env.TCB_ENVIRONMENT),
        network: jsonParse(process.env.TCB_NETWORK_CONFIG),
        addons: jsonParse(process.env.TCB_ADDON_CONFIG),
    };
}
function promptModify(framework) {
    return inquirer_1.default.prompt({
        type: 'confirm',
        name: 'isModifyConfig',
        message: `检测到当前项目包含 ${framework.name} 项目

${formatFrameworkConfig(framework.config)}

  是否需要修改默认配置`,
        default: false,
    });
}
function promptWriteConfig() {
    return inquirer_1.default.prompt({
        type: 'confirm',
        name: 'isWriteConfig',
        message: '是否需要保存当前项目配置到项目中',
    });
}
function formatFrameworkConfig(config) {
    if (!type_check_1.isObject(config)) {
        return '';
    }
    return Object.entries(config)
        .map(([, config]) => `  ${config.desc} \`${chalk_1.default.green(config.value)}\``)
        .join('\n');
}
function modifyFrameworkConfig(frameworkConfig = {}) {
    return inquirer_1.default.prompt(Object.entries(frameworkConfig).map(([name, config]) => {
        return {
            type: 'input',
            name,
            message: config.desc,
            default: config.value,
        };
    }));
}
function writeConfig(projectPath, rcConfig, frameworkConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const configJsonPath = path_1.default.join(projectPath, 'cloudbaserc.json');
        if (rcConfig) {
            fs_1.default.writeFileSync(configJsonPath, JSON.stringify(rcConfig, null, 4));
        }
        if (fs_1.default.existsSync(configJsonPath) && frameworkConfig) {
            const parser = new toolbox_1.ConfigParser({
                configPath: configJsonPath,
            });
            yield parser.update('framework', frameworkConfig);
        }
        else {
            fs_1.default.writeFileSync(path_1.default.join(projectPath, FRAMEWORK_CONFIG_FILENAME), JSON.stringify(frameworkConfig, null, 4));
        }
    });
}
function readFrameworkConfig(projectPath) {
    let config;
    try {
        config = JSON.parse(fs_1.default.readFileSync(path_1.default.join(projectPath, FRAMEWORK_CONFIG_FILENAME), 'utf8'));
    }
    catch (e) { }
    return config;
}
