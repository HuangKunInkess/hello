"use strict";
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudBaseFrameworkCore = exports.run = void 0;
/* eslint-disable @typescript-eslint/no-require-imports */
const util_1 = require("util");
const figlet_1 = __importDefault(require("figlet"));
const chalk_1 = __importDefault(require("chalk"));
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const link_1 = require("./utils/link");
const emoji_1 = require("./utils/emoji");
const gradient = require('gradient-string');
chalk_1.default.level = 1;
const plugin_manager_1 = __importDefault(require("./plugin-manager"));
const api_1 = require("./api");
const resolve_config_1 = __importDefault(require("./config/resolve-config"));
const context_1 = __importDefault(require("./context"));
const logger_1 = __importStar(require("./logger"));
const sam_1 = require("./sam");
const addon_1 = require("./sam/addon");
const hooks_1 = __importDefault(require("./hooks"));
const domain_1 = require("./api/domain");
const app_1 = require("./api/app");
const lifecycle_1 = __importDefault(require("./lifecycle"));
const error_1 = require("./error");
var plugin_1 = require("./plugin");
Object.defineProperty(exports, "Plugin", { enumerable: true, get: function () { return plugin_1.default; } });
var plugin_service_api_1 = require("./plugin-service-api");
Object.defineProperty(exports, "PluginServiceApi", { enumerable: true, get: function () { return plugin_service_api_1.default; } });
var builder_1 = require("./builder");
Object.defineProperty(exports, "Builder", { enumerable: true, get: function () { return builder_1.Builder; } });
var deployer_1 = require("./deployer");
Object.defineProperty(exports, "Deployer", { enumerable: true, get: function () { return deployer_1.Deployer; } });
var api_2 = require("./api");
Object.defineProperty(exports, "CloudApi", { enumerable: true, get: function () { return api_2.CloudApi; } });
__exportStar(require("./types"), exports);
const packageInfo = require('../package');
const SUPPORT_COMMANDS = ['deploy', 'compile', 'run'];
let globalErrorHandler = (e) => __awaiter(void 0, void 0, void 0, function* () {
    console.error(e.message);
});
let isReported = false;
/**
 *
 * 提供 CLI 调用
 *
 * @param cloudBaseFrameworkConfig
 * @param command
 * @param module
 * @param params
 */
function run(cloudBaseFrameworkConfig, command = 'deploy', module, params) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const frameworkCore = new CloudBaseFrameworkCore(cloudBaseFrameworkConfig);
            if (!SUPPORT_COMMANDS.includes(command)) {
                throw new Error(`CloudBase Framework: not support command '${command}'`);
            }
            const isDeploy = command === 'deploy';
            yield frameworkCore.init(isDeploy);
            yield frameworkCore[command](module, params);
            const logger = logger_1.default();
            logger.info('✨ done');
        }
        catch (e) {
            yield globalErrorHandler(e);
            process.exit(1);
        }
    });
}
exports.run = run;
/**
 * CloudBase Framework 核心实现类
 */
class CloudBaseFrameworkCore {
    constructor(frameworkConfig) {
        this.frameworkConfig = frameworkConfig;
    }
    init(isDeploy) {
        return __awaiter(this, void 0, void 0, function* () {
            this.isDeploy = isDeploy;
            const { projectPath, cloudbaseConfig, logLevel = 'info', config, resourceProviders, bumpVersion, versionRemark, } = this.frameworkConfig;
            // 初始化 logger
            const logger = logger_1.default(logLevel);
            yield showBanner();
            logger.info(`Version ${chalk_1.default.green(`v${packageInfo.version}`)}`);
            logger.info(`Github: ${link_1.genClickableLink('https://github.com/Tencent/cloudbase-framework')}
`);
            logger.info(`EnvId ${chalk_1.default.green(cloudbaseConfig.envId)}`);
            if (!projectPath || !cloudbaseConfig) {
                throw new Error('CloudBase Framework: config info missing');
            }
            yield api_1.CloudApi.init({
                envId: cloudbaseConfig.envId,
            });
            const { appConfig, originProjectInfo } = yield resolve_config_1.default(projectPath, config, cloudbaseConfig.envId);
            logger.info(`AppName ${chalk_1.default.green(appConfig.name)}`);
            this.projectInfo = originProjectInfo;
            if (!appConfig) {
                logger.info('⚠️ 未识别到框架配置');
                return;
            }
            logger.debug('appConfig', appConfig);
            this.samManager = new sam_1.SamManager({
                projectPath,
            });
            this.appConfig = appConfig;
            this.ciId = this.isDeploy ? yield this.createProjectVersion() : undefined;
            const context = new context_1.default({
                appConfig,
                projectConfig: config,
                cloudbaseConfig,
                projectPath,
                logLevel,
                resourceProviders,
                samManager: this.samManager,
                bumpVersion: !!bumpVersion,
                versionRemark: versionRemark || '',
                ciId: this.ciId,
            });
            this.context = context;
            this.lifeCycleManager = new lifecycle_1.default(context);
            function processSignalHandle(signal) {
                return __awaiter(this, void 0, void 0, function* () {
                    yield globalErrorHandler(new error_1.CloudBaseFrameworkError(`用户取消构建 ${signal}`, error_1.ERRORS.CANCEL_JOB));
                    process.exit(1);
                });
            }
            process.on('SIGTERM', processSignalHandle);
            // ctrl+c
            process.on('SIGINT', processSignalHandle);
            // console window
            process.on('SIGHUP', processSignalHandle);
            globalErrorHandler = (e) => __awaiter(this, void 0, void 0, function* () {
                const code = e instanceof error_1.CloudBaseFrameworkError && e.code;
                const message = `${code ? `[${code}] ` : ''} ${e.message || e}`;
                const failType = code in error_1.USER_ERRORS_MAP ? 'UserError' : 'SystemError';
                logger.error(message);
                logger.info('部署日志:', logger_1.getLogFilePath());
                if (!this.isDeploy) {
                    // 非部署情况不上报
                    return;
                }
                else if (e instanceof error_1.CloudBaseFrameworkError &&
                    e.code == error_1.ERRORS.DEPLOY_ERROR) {
                    // 部署失败不上报构建失败
                    return;
                }
                else if (isReported) {
                    // 避免多次上报
                    return;
                }
                else {
                    isReported = true;
                    return this.lifeCycleManager.reportBuildResult(1, message, failType);
                }
            });
            this.pluginManager = new plugin_manager_1.default(context);
            this.hooks = new hooks_1.default(appConfig.hooks || {}, projectPath);
        });
    }
    /**
     * 调用命令
     *
     * @param module
     * @param params
     */
    run(module, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const logger = logger_1.default();
            logger.debug('run', module || '', params || '');
            yield this.pluginManager.run(module, params === null || params === void 0 ? void 0 : params.runCommandKey);
        });
    }
    /**
     * 编译应用
     *
     * @param module
     * @param params
     */
    compile(module, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const logger = logger_1.default();
            logger.debug('compile', module || '', params || '');
            yield this.hooks.callHook('preDeploy');
            yield this._compile(module);
        });
    }
    /**
     * 编译并部署应用
     * @param module
     * @param params
     */
    deploy(module, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const logger = logger_1.default();
            logger.debug('deploy', module || '', params || '');
            yield this.hooks.callHook('preDeploy');
            yield this._compile(module);
            yield this.samManager.install(this.ciId, (extensionId) => __awaiter(this, void 0, void 0, function* () {
                this.context.extensionId = extensionId;
                return this.lifeCycleManager.reportBuildResult(0);
            }));
            yield this.pluginManager.deploy(module);
            yield this.hooks.callHook('postDeploy');
            const appEntry = yield this.samManager.getAppEntry();
            if (appEntry.length) {
                const domains = yield domain_1.fetchDomains();
                const entryLogInfo = appEntry
                    .map((entry) => {
                    let url;
                    let base;
                    switch (entry.EntryType) {
                        case 'StaticStore':
                            base = domains.static;
                            break;
                        case 'HttpService':
                            base = domains.service;
                            break;
                    }
                    url = `https://${base}${entry.HttpEntryPath
                        ? entry.HttpEntryPath[0] === '/'
                            ? entry.HttpEntryPath
                            : `/${entry.HttpEntryPath}`
                        : ''}`;
                    return `${emoji_1.emoji('🔗')} ${entry.Label}: ${link_1.genClickableLink(url)}`;
                })
                    .join('\n');
                logger_1.default().info(`${emoji_1.emoji('🌐')} 应用入口信息:
${entryLogInfo}`);
            }
        });
    }
    generateSamMeta() {
        var _a;
        const appName = `${this.appConfig.name || 'fx-app'}`;
        return lodash_merge_1.default(Object.assign({ Name: appName, Version: this.appConfig.version || '1.0.0', DisplayName: appName, Description: this.appConfig.description || '基于 CloudBase Framework 构建', Tags: this.appConfig.tags || [], Globals: {
                // 全局环境变量
                Environment: {
                    Variables: this.appConfig.environment || {},
                },
            } }, (this.appConfig.repo
            ? {
                SourceUrl: this.appConfig.repo.url,
                SourceDir: this.appConfig.repo.workDir || '.',
                SourceBranch: this.appConfig.repo.branch,
            }
            : {})), ((_a = this.appConfig.addons) === null || _a === void 0 ? void 0 : _a.length) ? addon_1.genAddonSam(this.appConfig.addons) : {});
    }
    createProjectVersion() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            let isCloudBuild = !!process.env.CLOUDBASE_CIID;
            // 云端部署直接返回
            if (isCloudBuild) {
                return process.env.CLOUDBASE_CIID;
                // 本地部署也创建项目版本
            }
            else {
                const Parameters = this.transpileEnvironments((_a = this.projectInfo) === null || _a === void 0 ? void 0 : _a.environment);
                const Source = ((_b = this.projectInfo) === null || _b === void 0 ? void 0 : _b.Source) || {
                    Type: 'local',
                    Url: '',
                    Name: '',
                    WorkDir: '',
                };
                // 兼容类型错误
                delete Source.Headers;
                // 旧的字段保持 JSON 格式，新字段使用字符串格式
                const data = yield app_1.createAndDeployCloudBaseProject({
                    Name: this.appConfig.name || '',
                    Parameters,
                    Source,
                    RcJson: JSON.stringify(Object.assign({}, this.frameworkConfig.config, {
                        framework: this.appConfig,
                    })),
                    Tags: this.appConfig.tags || [],
                    AddonConfig: JSON.stringify(this.appConfig.addons),
                    NetworkConfig: JSON.stringify(this.appConfig.network),
                });
                return data === null || data === void 0 ? void 0 : data.RequestId;
            }
        });
    }
    transpileEnvironments(environment) {
        return Object.entries(environment || {}).map(([Key, Value]) => {
            return {
                Key,
                Value,
            };
        });
    }
    /**
     * 编译 SAM
     * @param module
     */
    _compile(module) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.pluginManager.init(module);
            yield this.pluginManager.build(module);
            const compileResult = yield this.pluginManager.compile(module);
            const isHasContainer = !!Object.values(lodash_merge_1.default({}, ...compileResult).Resources || {}).filter((resource) => resource.Type === 'CloudBase::CloudBaseRun')
                .length;
            yield this.hooks.callHook('postCompile');
            const samMeta = this.generateSamMeta();
            const hooksSAM = this.hooks.genSAM();
            const networkSections = this.genNetworkSAM(isHasContainer);
            const samSections = [...compileResult, hooksSAM, networkSections];
            this.samManager.generate(samMeta, JSON.parse(JSON.stringify(samSections)));
        });
    }
    genNetworkSAM(isHasContainer) {
        // 没有网络配置
        if (!this.appConfig.network ||
            !Object.keys(this.appConfig.network).length) {
            return {};
        }
        // 没有vpcId，也没有容器
        if (!this.appConfig.network.uniqVpcId && !isHasContainer) {
            return {};
        }
        return {
            Resources: {
                Network: {
                    Type: 'CloudBase::VPC',
                    Properties: {
                        Description: 'VPC 网络配置',
                        UniqVpcId: this.appConfig.network.uniqVpcId,
                        CloudBaseRun: this.appConfig.network.cloudBaseRun,
                        Region: this.appConfig.network.region || '${TcbEnvRegion}',
                    },
                },
            },
        };
    }
}
exports.CloudBaseFrameworkCore = CloudBaseFrameworkCore;
/**
 * 展示 CloudBase Framework 横幅
 */
function showBanner() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const data = yield util_1.promisify(figlet_1.default.text)(`CloudBase
Framework`, {
                font: 'Slant',
                horizontalLayout: 'fitted',
                verticalLayoutL: 'fitted',
            });
            console.log(chalk_1.default.bold(gradient(['cyan', 'rgb(0, 111, 150)', 'rgb(0, 246,136)']).multiline(data + '\n')));
        }
        catch (e) { }
    });
}
