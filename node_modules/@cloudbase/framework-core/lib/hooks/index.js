"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const spawn_1 = require("../utils/spawn");
const logger_1 = __importDefault(require("../logger"));
const logger = logger_1.default();
class Hooks {
    constructor(hooksConfig, projectPath) {
        this.hooksConfig = hooksConfig;
        this.projectPath = projectPath;
        this.sam = {};
        // postDeploy 是调用函数类型时，提前到 postCompile 阶段，转换为 SAM 在云端执行
        if (hooksConfig.postDeploy &&
            hooksConfig.postDeploy.type === 'callFunction') {
            hooksConfig.postCompile = hooksConfig.postDeploy;
            delete hooksConfig.postDeploy;
        }
        logger.debug('initHooks', hooksConfig);
    }
    callHook(hookName) {
        return __awaiter(this, void 0, void 0, function* () {
            const hooksConfig = this.hooksConfig[hookName];
            logger.info('callHooks', hookName);
            if (!hooksConfig)
                return;
            switch (hooksConfig.type) {
                case 'execCommand':
                    if (hookName === 'postDeploy') {
                        throw new Error('postDeploy 钩子不支持调用 Command');
                    }
                    return this.execCommand(hooksConfig.commands);
                case 'callFunction':
                    if (hookName === 'preDeploy') {
                        throw new Error('preDeploy 钩子不支持调用云函数');
                    }
                    return this.callFunction(hooksConfig.functions);
            }
        });
    }
    genSAM() {
        logger.debug('hooks.genSAM', this.sam);
        return this.sam;
    }
    execCommand(commands = []) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let command of commands) {
                logger.info('execCommand', command);
                yield spawn_1.spawnPromise(command, [], {
                    cwd: this.projectPath,
                });
            }
        });
    }
    callFunction(functions) {
        // 转换为 SAM 在云端执行
        this.sam = {
            Config: {
                InstalledHook: functions.map((func) => {
                    return {
                        FunctionName: func.functionName,
                        Params: func.params,
                    };
                }),
            },
        };
    }
}
exports.default = Hooks;
