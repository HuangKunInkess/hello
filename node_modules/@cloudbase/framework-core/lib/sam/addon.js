"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genAddonSam = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const ADDONS = {
    CFS: {
        translate(addonConfig) {
            const { name, instanceId, instanceName, region, vpcId } = addonConfig;
            return {
                Resources: {
                    [name]: {
                        Type: 'CloudBase::CFS',
                        Properties: {
                            Description: '为您提供安全可靠、可扩展的共享文件存储服务',
                            InstanceName: instanceName,
                            Region: region || '${TcbEnvRegion}',
                            UniqVpcId: vpcId || '${Outputs.Network.Properties.InstanceId}',
                            NetInterface: 'VPC',
                            StorageType: 'SD',
                            InstanceId: instanceId,
                            UseInstanceId: true,
                        },
                    },
                },
            };
        },
    },
    CynosDB: {
        translate(addonConfig) {
            const { name, instanceId, instanceName, region, vpcId, password, plan, } = addonConfig;
            const passwordKey = `${name}_PASSWORD`;
            const STORAGE_LIMIT_MAP = {
                1: 1000,
                2: 5000,
                4: 10000,
                8: 10000,
                16: 20000,
            };
            let spec;
            if (!plan) {
                spec = {};
            }
            else if (plan.DbMode === 'serverless') {
                const { MaxCpu, MinCpu, AutoPause, AutoPauseDelay } = plan;
                spec = {
                    DbMode: 'SERVERLESS',
                    CPU: 1,
                    MemorySize: 1024,
                    MaxCpu,
                    MinCpu,
                    AutoPause,
                    AutoPauseDelay,
                    StorageLimit: STORAGE_LIMIT_MAP[Math.ceil(MaxCpu)],
                };
            }
            else {
                const { Cpu, Memory } = plan;
                spec = {
                    Cpu,
                    MemorySize: Memory,
                    StorageLimit: STORAGE_LIMIT_MAP[Cpu],
                };
            }
            return {
                Inputs: Object.assign({}, (password ? { [passwordKey]: password } : {})),
                Resources: {
                    [name]: {
                        Type: 'CloudBase::CynosDB',
                        Properties: Object.assign(Object.assign({ Description: '企业级云原生数据库，极速性能，海量存储，全面兼容开源数据库', InstanceName: instanceName, Region: region || '${TcbEnvRegion}', UniqVpcId: vpcId || '${Outputs.Network.Properties.InstanceId}', DbType: 'MYSQL', DbVersion: '5.7', PayMode: 0 }, spec), { UseInstanceId: true, Port: 3306, Password: `\${Inputs.${passwordKey}}`, InstanceCount: 1, InstanceId: instanceId }),
                    },
                },
            };
        },
    },
};
function genAddonSam(addons) {
    return addons.reduce((prev, cur) => {
        var _a;
        const { type } = cur;
        if (!(type in ADDONS)) {
            throw new Error(`Addon type ${type} 暂不支持`);
        }
        const translate = (_a = ADDONS[type]) === null || _a === void 0 ? void 0 : _a.translate;
        const Sam = translate(cur);
        lodash_merge_1.default(prev, Sam);
        return prev;
    }, {});
}
exports.genAddonSam = genAddonSam;
