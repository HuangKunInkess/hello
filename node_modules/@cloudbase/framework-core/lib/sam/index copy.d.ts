import { SamApi } from "./api";
import { ISAM, IExtensionLocalFile } from "./types";
export interface ISamManagerOptions {
    projectPath: string;
}
export declare class SamManager {
    protected samObj: Record<string, any>;
    protected projectPath: string;
    protected samApi: SamApi;
    constructor({ projectPath }: ISamManagerOptions);
    /**
     * 生成 SAM 文件
     *
     */
    generate(meta: Record<string, any>, samSections: Record<string, any>[]): void;
    /**
     * 安装
     */
    install(): Promise<void>;
    /**
     * 轮询状态
     * @param extensionId
     */
    checkStatus(extensionId: string): Promise<void>;
    clear(): void;
    waitUntil(fn: () => Promise<boolean>, interval?: 5000): Promise<unknown>;
    /**
     * 上传文件到 COS
     */
    uploadFile(files: IExtensionLocalFile[]): Promise<[unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown, unknown]>;
    /**
     * 上传文件到 COS
     * @param options
     */
    uploadFileViaUrlAndKey(options: any): Promise<void>;
    /**
     * 读取本地SAM
     */
    readSam(): ISAM;
}
//# sourceMappingURL=index copy.d.ts.map