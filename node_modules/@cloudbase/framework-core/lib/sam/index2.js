/**
 *
 * Copyright 2020 Tencent
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
'use strict';
const __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P((resolve) => {
      resolve(value);
    });
  }
  return new (P || (P = Promise))((resolve, reject) => {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const __importDefault = (this && this.__importDefault) || function (mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
};
Object.defineProperty(exports, '__esModule', { value: true });
exports.SamManager = void 0;
const fs_1 = __importDefault(require('fs'));
const path_1 = __importDefault(require('path'));
const crypto_1 = __importDefault(require('crypto'));
const lodash_merge_1 = __importDefault(require('lodash.merge'));
const js_yaml_1 = __importDefault(require('js-yaml'));
const progress_1 = __importDefault(require('progress'));
const cloud_api_1 = require('@cloudbase/cloud-api');
const default_sam_1 = require('./default-sam');
const api_1 = require('./api');
const logger_1 = __importDefault(require('../logger'));
const logger = logger_1.default();
class SamManager {
  constructor({ projectPath }) {
    this.samObj = {};
    this.projectPath = projectPath;
    this.samApi = new api_1.SamApi();
  }
  /**
     * 生成 SAM 文件
     *
     */
  generate(meta, samSections) {
    const EntryPoint = samSections
      .map(sam => sam.EntryPoint)
      .reduce((prev, cur) => {
        prev = [...prev, ...(cur || [])];
        return prev;
      }, []);
    this.samObj = lodash_merge_1.default(default_sam_1.DEFAULT_SAM, meta, ...samSections, {
      EntryPoint,
    });
    this.samObj.Resources = Object.entries(this.samObj.Resources || {}).reduce((prev, cur) => {
      const [name, resource] = cur;
      prev[name] = resource;
      return prev;
    }, {});
    const samYaml = js_yaml_1.default.safeDump(this.samObj);
    fs_1.default.writeFileSync(path_1.default.join(this.projectPath, 'TCBSAM.yaml'), samYaml);
  }
  /**
     * 安装
     */
  install() {
    return __awaiter(this, void 0, void 0, function* () {
      const template = this.readSam();
      let extensionId;
      // 没有资源需要部署的情况不走 SAM安装
      if (!Object.keys(template.Resources).length) {
        return this.clear();
      }
      try {
        try {
          const res = yield this.samApi.createAndInstall(JSON.stringify(template));
          extensionId = res.ExtensionId;
        } catch (e) {
          if (e.code === 'ResourceInUse') {
            extensionId = e.original.Message;
          } else {
            throw e;
          }
        }
        // 云端一键部署时不轮询查询结果
        if (process.env.CLOUDBASE_CIID) {
          yield this.samApi.reportCloudBaseCIResultCallback(process.env.CLOUDBASE_CIID, process.env.CLOUDBASE_TRACEID || '', extensionId);
        } else {
          yield this.checkStatus(extensionId);
        }
      } catch (e) {
        this.clear();
        throw e;
      }
      this.clear();
    });
  }
  /**
     * 轮询状态
     * @param extensionId
     */
  checkStatus(extensionId) {
    return __awaiter(this, void 0, void 0, function* () {
      const bar = new progress_1.default('正在部署[:bar] :percent :elapsed s', {
        complete: '░',
        incomplete: ' ',
        width: 40,
        total: 100,
      });
      let percent = 0;
      yield this.waitUntil(() => __awaiter(this, void 0, void 0, function* () {
        const statusRes = yield this.samApi.fetchExtensionTaskStatus([
          extensionId,
        ]);
        const taskInfos = statusRes.ExtensionTaskInfo;
        const taskInfo = taskInfos[0];
        if (taskInfo) {
          const delta = (taskInfo.Percent || 0) - percent;
          percent = taskInfo.Percent || 0;
          bar.tick(delta);
          if (taskInfo.Status === 'running') {
            return true;
          }
          if (taskInfo.Detail) {
            throw new Error(`
部署失败，错误信息：${taskInfo.Detail}， 请求RequestId：${statusRes.RequestId}`);
          }
        }
        return taskInfos.filter(item => ['running'].includes(item.Status))
          .length;
      }));
    });
  }
  clear() {
    fs_1.default.unlinkSync(path_1.default.join(this.projectPath, 'TCBSAM.yaml'));
  }
  waitUntil(fn, interval) {
    return __awaiter(this, void 0, void 0, function* () {
      return new Promise((resolve, reject) => {
        const timer = setInterval(() => __awaiter(this, void 0, void 0, function* () {
          try {
            const result = yield fn();
            if (result) {
              resolve();
              clearInterval(timer);
            }
          } catch (e) {
            clearInterval(timer);
            reject(e);
          }
        }), interval || 5000);
      });
    });
  }
  /**
     * 上传文件到 COS
     */
  uploadFile(files) {
    return __awaiter(this, void 0, void 0, function* () {
      const uploadInfo = yield this.samApi.describeExtensionUploadInfo(files.map(file => ({
        FileType: file.fileType,
        FileName: file.fileName,
      })));
      const filesData = uploadInfo.FilesData;
      return Promise.all(filesData.map((fileData, index) => __awaiter(this, void 0, void 0, function* () {
        console.log(files, fileData);
        yield this.uploadFileViaUrlAndKey({
          url: fileData.UploadUrl,
          customKey: filesData.CustomKey,
          file: files[index].filePath,
        });
        console.log(fileData);
        return {
          codeUri: fileData.CodeUri,
        };
      })));
    });
  }
  /**
     * 上传文件到 COS
     * @param options
     */
  uploadFileViaUrlAndKey(options) {
    return __awaiter(this, void 0, void 0, function* () {
      const { url, file, customKey } = options;
      const headers = {};
      if (customKey) {
        headers['x-cos-server-side-encryption-customer-algorithm'] = 'AES256';
        headers['x-cos-server-side-encryption-customer-key'] = Buffer.from(customKey).toString('base64');
        headers['x-cos-server-side-encryption-customer-key-MD5'] = crypto_1.default.createHash('md5').update(customKey)
          .digest('base64');
      }
      console.log(yield cloud_api_1.fetchStream(url, {
        body: file,
        headers,
        method: 'PUT',
      }));
    });
  }
  /**
     * 读取本地SAM
     */
  readSam() {
    const samFile = fs_1.default.readFileSync(path_1.default.join(this.projectPath, 'TCBSAM.yaml'), 'utf-8');
    return js_yaml_1.default.safeLoad(samFile);
  }
}
exports.SamManager = SamManager;
