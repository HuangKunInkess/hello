"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SamManager = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const crypto_1 = __importDefault(require("crypto"));
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const progress_1 = __importDefault(require("progress"));
const cloud_api_1 = require("@cloudbase/cloud-api");
const toolbox_1 = require("@cloudbase/toolbox");
const default_sam_1 = require("./default-sam");
const api_1 = require("./api");
const logger_1 = __importDefault(require("../logger"));
const error_1 = require("../error");
const logger = logger_1.default();
class SamManager {
    constructor({ projectPath }) {
        this.samObj = {};
        this.projectPath = projectPath;
        this.samApi = new api_1.SamApi();
    }
    /**
     * 生成 SAM 文件
     *
     */
    generate(meta, samSections) {
        let EntryPoint = samSections
            .map((sam) => sam.EntryPoint)
            .reduce((prev, cur) => {
            prev = [...prev, ...(cur || [])];
            return prev;
        }, []);
        this.samObj = lodash_merge_1.default(default_sam_1.DEFAULT_SAM, meta, ...samSections, {
            EntryPoint,
        });
        this.samObj.Resources = JSON.parse(JSON.stringify(Object.entries(this.samObj.Resources || {}).reduce((prev, cur) => {
            const [name, resource] = cur;
            prev[name] = resource;
            return prev;
        }, {})));
        // parse 和 stringify 是为了去掉undefined等 yaml 不支持的格式
        const samYaml = js_yaml_1.default.safeDump(JSON.parse(JSON.stringify(this.samObj)));
        fs_1.default.writeFileSync(path_1.default.join(this.projectPath, 'TCBSAM.yaml'), samYaml);
    }
    /**
     * 安装
     */
    install(ciId, createSamSuccessCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            const template = this.readSam();
            let isCloudBuild = !!process.env.CLOUDBASE_CIID;
            let extensionId;
            // 没有资源需要部署的情况不走 SAM安装
            if (!Object.keys(template.Resources).length &&
                !Object.keys(template.Config || {}).length) {
                return this.clear();
            }
            try {
                try {
                    logger.debug('sam:install', template);
                    const res = yield this.samApi.createAndInstall(JSON.stringify(template));
                    extensionId = res.ExtensionId;
                    if (typeof createSamSuccessCallback === 'function') {
                        yield createSamSuccessCallback(extensionId);
                    }
                }
                catch (e) {
                    if (e.code === 'ResourceInUse') {
                        extensionId = e.original.Message;
                        if (typeof createSamSuccessCallback === 'function') {
                            yield createSamSuccessCallback(extensionId);
                        }
                    }
                    else {
                        throw e;
                    }
                }
                // 回调扩展信息，和项目关联
                if (ciId) {
                    yield this.samApi.reportCloudBaseCIResultCallback(ciId, process.env.CLOUDBASE_TRACEID || '', extensionId);
                }
                // 云端一键部署时不轮询查询结果
                if (!isCloudBuild) {
                    yield this.checkStatus(extensionId);
                }
            }
            catch (e) {
                this.clear();
                throw e;
            }
            this.clear();
        });
    }
    getAppEntry() {
        var _a;
        return ((_a = this.samObj) === null || _a === void 0 ? void 0 : _a.EntryPoint) || [];
    }
    /**
     * 轮询状态
     * @param extensionId
     */
    checkStatus(extensionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const bar = new progress_1.default('正在部署[:bar] :percent :elapsed s', {
                complete: '░',
                incomplete: ' ',
                width: 40,
                total: 100,
            });
            let percent = 0;
            yield this.waitUntil(() => __awaiter(this, void 0, void 0, function* () {
                const statusRes = yield this.samApi.fetchExtensionTaskStatus([
                    extensionId,
                ]);
                const taskInfos = statusRes.ExtensionTaskInfo;
                const taskInfo = taskInfos[0];
                logger.debug('ext taskInfo', taskInfo);
                if (taskInfo) {
                    const delta = (taskInfo.Percent || 0) - percent;
                    percent = taskInfo.Percent || 0;
                    bar.tick(delta);
                    if (taskInfo.Status === 'running') {
                        return true;
                    }
                    else if (taskInfo.Detail) {
                        throw new error_1.CloudBaseFrameworkError(`
部署失败，错误信息：${taskInfo.Detail}， 请求RequestId：${statusRes.RequestId}`, error_1.ERRORS.DEPLOY_ERROR);
                    }
                }
                return taskInfos.filter((item) => ['running'].includes(item.Status))
                    .length;
            }));
        });
    }
    clear() {
        fs_1.default.unlinkSync(path_1.default.join(this.projectPath, 'TCBSAM.yaml'));
    }
    waitUntil(fn, interval) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const timer = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const result = yield fn();
                        if (result) {
                            resolve(result);
                            clearInterval(timer);
                        }
                    }
                    catch (e) {
                        clearInterval(timer);
                        reject(e);
                    }
                }), interval || 5000);
            });
        });
    }
    /**
     * 上传文件到 COS
     */
    uploadFile(files) {
        return __awaiter(this, void 0, void 0, function* () {
            const uploadInfo = yield this.samApi.describeExtensionUploadInfo(files.map((file) => {
                return {
                    FileType: file.fileType,
                    FileName: file.fileName,
                };
            }));
            const filesData = uploadInfo.FilesData;
            return Promise.all(filesData.map((fileData, index) => __awaiter(this, void 0, void 0, function* () {
                yield this.uploadFileViaUrlAndKey({
                    url: fileData.UploadUrl,
                    customKey: fileData.CustomKey,
                    file: files[index].filePath,
                    maxSize: fileData.MaxSize,
                });
                return {
                    codeUri: fileData.CodeUri,
                };
            })));
        });
    }
    /**
     * 上传文件到 COS
     * @param options
     */
    uploadFileViaUrlAndKey(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { url, file, customKey, maxSize } = options;
            const headers = {};
            if (customKey) {
                headers['x-cos-server-side-encryption-customer-algorithm'] = 'AES256';
                headers['x-cos-server-side-encryption-customer-key'] = Buffer.from(customKey).toString('base64');
                headers['x-cos-server-side-encryption-customer-key-MD5'] = crypto_1.default.createHash('md5').update(customKey).digest('base64');
            }
            const size = fs_1.default.statSync(file).size;
            if (size > maxSize * 1024 * 1024) {
                throw new Error(`${file} 文件大小超出限制 ${maxSize} MB`);
            }
            else if (size === 0) {
                throw new Error(`${file} 文件大小为 0，请检查`);
            }
            headers['Content-Type'] = 'application/zip';
            logger.debug('uploadFileViaUrlAndKey: headers', headers);
            logger.debug('uploadFileViaUrlAndKey: file', file, 'size', size);
            yield cloud_api_1.fetchStream(url, {
                body: fs_1.default.createReadStream(file),
                headers,
                method: 'PUT',
            }, toolbox_1.getProxy());
        });
    }
    /**
     * 读取本地SAM
     */
    readSam() {
        const samFile = fs_1.default.readFileSync(path_1.default.join(this.projectPath, 'TCBSAM.yaml'), 'utf-8');
        return js_yaml_1.default.safeLoad(samFile);
    }
}
exports.SamManager = SamManager;
