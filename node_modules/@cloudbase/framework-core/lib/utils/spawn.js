"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.spawnPromise = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const child_process_1 = require("child_process");
function spawnPromise(command, args, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            var _a, _b;
            const cm = child_process_1.spawn(command, args, Object.assign({
                shell: true,
                // stderr 使用 process.stderr 用于收集错误
                stdio: ['inherit', 'inherit', 'pipe'],
            }, options));
            let stdout = '';
            (_a = cm.stdout) === null || _a === void 0 ? void 0 : _a.on('data', (data) => {
                stdout += data;
            });
            let stderr = '';
            (_b = cm.stderr) === null || _b === void 0 ? void 0 : _b.on('data', (data) => {
                stderr += data;
            });
            cm.on('error', reject);
            cm.on('close', (code) => {
                code === 0 ? resolve(stdout) : reject(new Error(stderr || String(code)));
            });
        });
    });
}
exports.spawnPromise = spawnPromise;
