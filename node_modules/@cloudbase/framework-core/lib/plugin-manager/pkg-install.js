"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageList = exports.install = exports.npmInstallWithCheck = void 0;
/**
 * Tencent is pleased to support the open source community by making CloudBaseFramework - 云原生一体化部署工具 available.
 *
 * Copyright (C) 2020 THL A29 Limited, a Tencent company.  All rights reserved.
 *
 * Please refer to license text included with this package for license details.
 */
const path_1 = __importDefault(require("path"));
const package_json_1 = __importDefault(require("package-json"));
const https_proxy_agent_1 = __importDefault(require("https-proxy-agent"));
const toolbox_1 = require("@cloudbase/toolbox");
const logger_1 = __importDefault(require("../logger"));
const spawn_1 = require("../utils/spawn");
function npmInstallWithCheck(packageInfo, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let needUpdatePackageInfo = {};
        const logger = logger_1.default();
        yield Promise.all(Object.entries(packageInfo).map(([name, version]) => __awaiter(this, void 0, void 0, function* () {
            const startTime = new Date();
            const checkResult = yield checkNeedUpdate(name, version, (options === null || options === void 0 ? void 0 : options.cwd) || process.cwd());
            if (checkResult.isNeedUpdate) {
                needUpdatePackageInfo[name] = checkResult.resolvedVersion;
            }
            logger.debug(`resolve plugin ${name}@${version}: use ${((new Date().valueOf() - startTime.valueOf()) /
                1000).toFixed(2)} s, mismatch：${checkResult.isNeedUpdate}, resolved version：${checkResult.resolvedVersion}`);
        })));
        const args = ['install'];
        const packageList = getPackageList(needUpdatePackageInfo);
        if (packageList.length === 0) {
            return;
        }
        const npmOptions = ['--no-audit', '--progress=false'];
        // 支持node8
        return spawn_1.spawnPromise('npm', [...args, ...packageList, ...npmOptions], {
            cwd: (options === null || options === void 0 ? void 0 : options.cwd) || process.cwd(),
        });
    });
}
exports.npmInstallWithCheck = npmInstallWithCheck;
function checkNeedUpdate(name, version, cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        const isResolvedVersion = /^\d/.test(version);
        let resolvedVersion;
        if (isResolvedVersion) {
            resolvedVersion = version;
        }
        else {
            const proxy = toolbox_1.getProxy();
            const meta = yield package_json_1.default(name, Object.assign({ version }, (proxy ? { agent: https_proxy_agent_1.default(proxy) } : {})));
            resolvedVersion = meta.version;
        }
        const localVersion = checkLocalVersion(name, cwd);
        return {
            isNeedUpdate: resolvedVersion !== localVersion,
            resolvedVersion: resolvedVersion,
        };
    });
}
function checkLocalVersion(name, cwd) {
    let version;
    try {
        const localPackageJson = require(path_1.default.join(cwd, 'node_modules', name, 'package.json'));
        version = localPackageJson.version;
    }
    catch (e) { }
    return version;
}
function install(packageInfo, options) {
    const packageList = getPackageList(packageInfo);
    const args = ['install'];
    const npmOptions = ['--prefer-offline', '--no-audit', '--progress=false'];
    // 支持node8
    return spawn_1.spawnPromise('npm', [...args, ...packageList, ...npmOptions], {
        cwd: (options === null || options === void 0 ? void 0 : options.cwd) || process.cwd(),
    });
}
exports.install = install;
function getPackageList(packages) {
    if (Array.isArray(packages)) {
        return packages.filter((pkg) => typeof pkg === 'string');
    }
    const entries = Object.entries(packages);
    return entries
        .filter(([name, version]) => (typeof name === 'string' && typeof version === 'string') ||
        typeof version === 'undefined')
        .map(([name, version]) => (version ? `${name}@${version}` : name));
}
exports.getPackageList = getPackageList;
